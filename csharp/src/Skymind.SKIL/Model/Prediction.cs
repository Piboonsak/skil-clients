/* 
 * Endpoints
 *
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.1.0-beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Skymind.SKIL.Client.SwaggerDateConverter;

namespace Skymind.SKIL.Model
{
    /// <summary>
    /// Prediction
    /// </summary>
    [DataContract]
    public partial class Prediction :  IEquatable<Prediction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Prediction" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="NeedsPreProcessing">NeedsPreProcessing.</param>
        /// <param name="_Prediction">_Prediction.</param>
        /// <param name="InputMask">InputMask.</param>
        public Prediction(string Id = default(string), bool? NeedsPreProcessing = default(bool?), INDArray _Prediction = default(INDArray), INDArray InputMask = default(INDArray))
        {
            this.Id = Id;
            this.NeedsPreProcessing = NeedsPreProcessing;
            this._Prediction = _Prediction;
            this.InputMask = InputMask;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets NeedsPreProcessing
        /// </summary>
        [DataMember(Name="needsPreProcessing", EmitDefaultValue=false)]
        public bool? NeedsPreProcessing { get; set; }

        /// <summary>
        /// Gets or Sets _Prediction
        /// </summary>
        [DataMember(Name="prediction", EmitDefaultValue=false)]
        public INDArray _Prediction { get; set; }

        /// <summary>
        /// Gets or Sets InputMask
        /// </summary>
        [DataMember(Name="inputMask", EmitDefaultValue=false)]
        public INDArray InputMask { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Prediction {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  NeedsPreProcessing: ").Append(NeedsPreProcessing).Append("\n");
            sb.Append("  _Prediction: ").Append(_Prediction).Append("\n");
            sb.Append("  InputMask: ").Append(InputMask).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Prediction);
        }

        /// <summary>
        /// Returns true if Prediction instances are equal
        /// </summary>
        /// <param name="input">Instance of Prediction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Prediction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.NeedsPreProcessing == input.NeedsPreProcessing ||
                    (this.NeedsPreProcessing != null &&
                    this.NeedsPreProcessing.Equals(input.NeedsPreProcessing))
                ) && 
                (
                    this._Prediction == input._Prediction ||
                    (this._Prediction != null &&
                    this._Prediction.Equals(input._Prediction))
                ) && 
                (
                    this.InputMask == input.InputMask ||
                    (this.InputMask != null &&
                    this.InputMask.Equals(input.InputMask))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.NeedsPreProcessing != null)
                    hashCode = hashCode * 59 + this.NeedsPreProcessing.GetHashCode();
                if (this._Prediction != null)
                    hashCode = hashCode * 59 + this._Prediction.GetHashCode();
                if (this.InputMask != null)
                    hashCode = hashCode * 59 + this.InputMask.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
