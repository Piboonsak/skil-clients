/* 
 * Endpoints
 *
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.2.0-beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Skymind.SKIL.Client.SwaggerDateConverter;

namespace Skymind.SKIL.Model
{
    /// <summary>
    /// CreateJobRequest
    /// </summary>
    [DataContract]
    public partial class CreateJobRequest :  IEquatable<CreateJobRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateJobRequest" /> class.
        /// </summary>
        /// <param name="computeResourceId">Compute resource ID.</param>
        /// <param name="storageResourceId">Storage resource ID.</param>
        /// <param name="skilSparkMainArgs">SKILSparkMain class arguments.</param>
        /// <param name="outputFileName">Output file name.</param>
        public CreateJobRequest(long? computeResourceId = default(long?), long? storageResourceId = default(long?), string skilSparkMainArgs = default(string), string outputFileName = default(string))
        {
            this.ComputeResourceId = computeResourceId;
            this.StorageResourceId = storageResourceId;
            this.SkilSparkMainArgs = skilSparkMainArgs;
            this.OutputFileName = outputFileName;
        }
        
        /// <summary>
        /// Compute resource ID
        /// </summary>
        /// <value>Compute resource ID</value>
        [DataMember(Name="computeResourceId", EmitDefaultValue=false)]
        public long? ComputeResourceId { get; set; }

        /// <summary>
        /// Storage resource ID
        /// </summary>
        /// <value>Storage resource ID</value>
        [DataMember(Name="storageResourceId", EmitDefaultValue=false)]
        public long? StorageResourceId { get; set; }

        /// <summary>
        /// SKILSparkMain class arguments
        /// </summary>
        /// <value>SKILSparkMain class arguments</value>
        [DataMember(Name="skilSparkMainArgs", EmitDefaultValue=false)]
        public string SkilSparkMainArgs { get; set; }

        /// <summary>
        /// Output file name
        /// </summary>
        /// <value>Output file name</value>
        [DataMember(Name="outputFileName", EmitDefaultValue=false)]
        public string OutputFileName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateJobRequest {\n");
            sb.Append("  ComputeResourceId: ").Append(ComputeResourceId).Append("\n");
            sb.Append("  StorageResourceId: ").Append(StorageResourceId).Append("\n");
            sb.Append("  SkilSparkMainArgs: ").Append(SkilSparkMainArgs).Append("\n");
            sb.Append("  OutputFileName: ").Append(OutputFileName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateJobRequest);
        }

        /// <summary>
        /// Returns true if CreateJobRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateJobRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateJobRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ComputeResourceId == input.ComputeResourceId ||
                    (this.ComputeResourceId != null &&
                    this.ComputeResourceId.Equals(input.ComputeResourceId))
                ) && 
                (
                    this.StorageResourceId == input.StorageResourceId ||
                    (this.StorageResourceId != null &&
                    this.StorageResourceId.Equals(input.StorageResourceId))
                ) && 
                (
                    this.SkilSparkMainArgs == input.SkilSparkMainArgs ||
                    (this.SkilSparkMainArgs != null &&
                    this.SkilSparkMainArgs.Equals(input.SkilSparkMainArgs))
                ) && 
                (
                    this.OutputFileName == input.OutputFileName ||
                    (this.OutputFileName != null &&
                    this.OutputFileName.Equals(input.OutputFileName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ComputeResourceId != null)
                    hashCode = hashCode * 59 + this.ComputeResourceId.GetHashCode();
                if (this.StorageResourceId != null)
                    hashCode = hashCode * 59 + this.StorageResourceId.GetHashCode();
                if (this.SkilSparkMainArgs != null)
                    hashCode = hashCode * 59 + this.SkilSparkMainArgs.GetHashCode();
                if (this.OutputFileName != null)
                    hashCode = hashCode * 59 + this.OutputFileName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
