/* 
 * Predict
 *
 * Endpoints API for classification and other prediction services in SKIL
 *
 * OpenAPI spec version: 1.1.0-beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Skymind.SKIL.Client.SwaggerDateConverter;

namespace Skymind.SKIL.Model
{
    /// <summary>
    /// DeployModel
    /// </summary>
    [DataContract]
    public partial class DeployModel :  IEquatable<DeployModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeployModel" /> class.
        /// </summary>
        /// <param name="Name">Name.</param>
        /// <param name="Scale">Scale.</param>
        /// <param name="Uri">Uri.</param>
        /// <param name="ModelType">ModelType.</param>
        /// <param name="FileLocation">FileLocation.</param>
        /// <param name="JvmArgs">JvmArgs.</param>
        /// <param name="SubType">SubType.</param>
        /// <param name="LabelsFileLocation">LabelsFileLocation.</param>
        /// <param name="ExtraArgs">ExtraArgs.</param>
        /// <param name="EtlJson">EtlJson.</param>
        /// <param name="InputNames">InputNames.</param>
        /// <param name="OutputNames">OutputNames.</param>
        public DeployModel(string Name = default(string), int? Scale = default(int?), string Uri = default(string), string ModelType = default(string), string FileLocation = default(string), string JvmArgs = default(string), string SubType = default(string), string LabelsFileLocation = default(string), string ExtraArgs = default(string), string EtlJson = default(string), string InputNames = default(string), string OutputNames = default(string))
        {
            this.Name = Name;
            this.Scale = Scale;
            this.Uri = Uri;
            this.ModelType = ModelType;
            this.FileLocation = FileLocation;
            this.JvmArgs = JvmArgs;
            this.SubType = SubType;
            this.LabelsFileLocation = LabelsFileLocation;
            this.ExtraArgs = ExtraArgs;
            this.EtlJson = EtlJson;
            this.InputNames = InputNames;
            this.OutputNames = OutputNames;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Scale
        /// </summary>
        [DataMember(Name="scale", EmitDefaultValue=false)]
        public int? Scale { get; set; }

        /// <summary>
        /// Gets or Sets Uri
        /// </summary>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// Gets or Sets ModelType
        /// </summary>
        [DataMember(Name="modelType", EmitDefaultValue=false)]
        public string ModelType { get; set; }

        /// <summary>
        /// Gets or Sets FileLocation
        /// </summary>
        [DataMember(Name="fileLocation", EmitDefaultValue=false)]
        public string FileLocation { get; set; }

        /// <summary>
        /// Gets or Sets JvmArgs
        /// </summary>
        [DataMember(Name="jvmArgs", EmitDefaultValue=false)]
        public string JvmArgs { get; set; }

        /// <summary>
        /// Gets or Sets SubType
        /// </summary>
        [DataMember(Name="subType", EmitDefaultValue=false)]
        public string SubType { get; set; }

        /// <summary>
        /// Gets or Sets LabelsFileLocation
        /// </summary>
        [DataMember(Name="labelsFileLocation", EmitDefaultValue=false)]
        public string LabelsFileLocation { get; set; }

        /// <summary>
        /// Gets or Sets ExtraArgs
        /// </summary>
        [DataMember(Name="extraArgs", EmitDefaultValue=false)]
        public string ExtraArgs { get; set; }

        /// <summary>
        /// Gets or Sets EtlJson
        /// </summary>
        [DataMember(Name="etlJson", EmitDefaultValue=false)]
        public string EtlJson { get; set; }

        /// <summary>
        /// Gets or Sets InputNames
        /// </summary>
        [DataMember(Name="inputNames", EmitDefaultValue=false)]
        public string InputNames { get; set; }

        /// <summary>
        /// Gets or Sets OutputNames
        /// </summary>
        [DataMember(Name="outputNames", EmitDefaultValue=false)]
        public string OutputNames { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeployModel {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Scale: ").Append(Scale).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  ModelType: ").Append(ModelType).Append("\n");
            sb.Append("  FileLocation: ").Append(FileLocation).Append("\n");
            sb.Append("  JvmArgs: ").Append(JvmArgs).Append("\n");
            sb.Append("  SubType: ").Append(SubType).Append("\n");
            sb.Append("  LabelsFileLocation: ").Append(LabelsFileLocation).Append("\n");
            sb.Append("  ExtraArgs: ").Append(ExtraArgs).Append("\n");
            sb.Append("  EtlJson: ").Append(EtlJson).Append("\n");
            sb.Append("  InputNames: ").Append(InputNames).Append("\n");
            sb.Append("  OutputNames: ").Append(OutputNames).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeployModel);
        }

        /// <summary>
        /// Returns true if DeployModel instances are equal
        /// </summary>
        /// <param name="input">Instance of DeployModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeployModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Scale == input.Scale ||
                    (this.Scale != null &&
                    this.Scale.Equals(input.Scale))
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.ModelType == input.ModelType ||
                    (this.ModelType != null &&
                    this.ModelType.Equals(input.ModelType))
                ) && 
                (
                    this.FileLocation == input.FileLocation ||
                    (this.FileLocation != null &&
                    this.FileLocation.Equals(input.FileLocation))
                ) && 
                (
                    this.JvmArgs == input.JvmArgs ||
                    (this.JvmArgs != null &&
                    this.JvmArgs.Equals(input.JvmArgs))
                ) && 
                (
                    this.SubType == input.SubType ||
                    (this.SubType != null &&
                    this.SubType.Equals(input.SubType))
                ) && 
                (
                    this.LabelsFileLocation == input.LabelsFileLocation ||
                    (this.LabelsFileLocation != null &&
                    this.LabelsFileLocation.Equals(input.LabelsFileLocation))
                ) && 
                (
                    this.ExtraArgs == input.ExtraArgs ||
                    (this.ExtraArgs != null &&
                    this.ExtraArgs.Equals(input.ExtraArgs))
                ) && 
                (
                    this.EtlJson == input.EtlJson ||
                    (this.EtlJson != null &&
                    this.EtlJson.Equals(input.EtlJson))
                ) && 
                (
                    this.InputNames == input.InputNames ||
                    (this.InputNames != null &&
                    this.InputNames.Equals(input.InputNames))
                ) && 
                (
                    this.OutputNames == input.OutputNames ||
                    (this.OutputNames != null &&
                    this.OutputNames.Equals(input.OutputNames))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Scale != null)
                    hashCode = hashCode * 59 + this.Scale.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.ModelType != null)
                    hashCode = hashCode * 59 + this.ModelType.GetHashCode();
                if (this.FileLocation != null)
                    hashCode = hashCode * 59 + this.FileLocation.GetHashCode();
                if (this.JvmArgs != null)
                    hashCode = hashCode * 59 + this.JvmArgs.GetHashCode();
                if (this.SubType != null)
                    hashCode = hashCode * 59 + this.SubType.GetHashCode();
                if (this.LabelsFileLocation != null)
                    hashCode = hashCode * 59 + this.LabelsFileLocation.GetHashCode();
                if (this.ExtraArgs != null)
                    hashCode = hashCode * 59 + this.ExtraArgs.GetHashCode();
                if (this.EtlJson != null)
                    hashCode = hashCode * 59 + this.EtlJson.GetHashCode();
                if (this.InputNames != null)
                    hashCode = hashCode * 59 + this.InputNames.GetHashCode();
                if (this.OutputNames != null)
                    hashCode = hashCode * 59 + this.OutputNames.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
