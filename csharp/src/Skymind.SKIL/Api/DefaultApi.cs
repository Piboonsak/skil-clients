/* 
 * Predict
 *
 * Endpoints API for classification and other prediction services in SKIL
 *
 * OpenAPI spec version: 1.1.0-beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Skymind.SKIL.Client;
using Skymind.SKIL.Model;

namespace Skymind.SKIL.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Use the deployed model to classify the input
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input NDArray</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>ClassificationResult</returns>
        ClassificationResult Classify (Prediction body, string modelURI);

        /// <summary>
        /// Use the deployed model to classify the input
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input NDArray</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>ApiResponse of ClassificationResult</returns>
        ApiResponse<ClassificationResult> ClassifyWithHttpInfo (Prediction body, string modelURI);
        /// <summary>
        /// Same as /classify but returns the output as Base64NDArrayBody
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input NDArray</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>Base64NDArrayBody</returns>
        Base64NDArrayBody Classifyarray (Prediction body, string modelURI);

        /// <summary>
        /// Same as /classify but returns the output as Base64NDArrayBody
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input NDArray</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>ApiResponse of Base64NDArrayBody</returns>
        ApiResponse<Base64NDArrayBody> ClassifyarrayWithHttpInfo (Prediction body, string modelURI);
        /// <summary>
        /// Use the deployed model to classify the input, using input image file from multipart form data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelURI">The URI of the model</param>
        /// <param name="image">The file to upload. (optional)</param>
        /// <returns>ClassificationResult</returns>
        ClassificationResult Classifyimage (string modelURI, System.IO.Stream image = null);

        /// <summary>
        /// Use the deployed model to classify the input, using input image file from multipart form data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelURI">The URI of the model</param>
        /// <param name="image">The file to upload. (optional)</param>
        /// <returns>ApiResponse of ClassificationResult</returns>
        ApiResponse<ClassificationResult> ClassifyimageWithHttpInfo (string modelURI, System.IO.Stream image = null);
        /// <summary>
        /// Deploy a model in a deployment group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="body">the deployment request</param>
        /// <returns>Object</returns>
        Object DeployModel (string deploymentId, DeployModel body);

        /// <summary>
        /// Deploy a model in a deployment group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="body">the deployment request</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeployModelWithHttpInfo (string deploymentId, DeployModel body);
        /// <summary>
        /// Create a new deployment group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">the deployment request</param>
        /// <returns>Deployment</returns>
        Deployment DeploymentCreate (NewDeployment body);

        /// <summary>
        /// Create a new deployment group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">the deployment request</param>
        /// <returns>ApiResponse of Deployment</returns>
        ApiResponse<Deployment> DeploymentCreateWithHttpInfo (NewDeployment body);
        /// <summary>
        /// Run inference on the input and returns it as a JsonArrayResponse
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input NDArray</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>JsonArrayResponse</returns>
        JsonArrayResponse Jsonarray (Prediction body, string modelURI);

        /// <summary>
        /// Run inference on the input and returns it as a JsonArrayResponse
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input NDArray</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>ApiResponse of JsonArrayResponse</returns>
        ApiResponse<JsonArrayResponse> JsonarrayWithHttpInfo (Prediction body, string modelURI);
        /// <summary>
        /// Get logs file path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <returns>string</returns>
        string Logfilepath (string deploymentName, string modelName);

        /// <summary>
        /// Get logs file path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> LogfilepathWithHttpInfo (string deploymentName, string modelName);
        /// <summary>
        /// Post JSON credentials and obtain a JWT authorization token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Login credentials.</param>
        /// <returns>Token</returns>
        Token Login (Credentials credentials);

        /// <summary>
        /// Post JSON credentials and obtain a JWT authorization token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Login credentials.</param>
        /// <returns>ApiResponse of Token</returns>
        ApiResponse<Token> LoginWithHttpInfo (Credentials credentials);
        /// <summary>
        /// Get logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">the the log request</param>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <returns>LogBatch</returns>
        LogBatch Logs (LogRequest body, string deploymentName, string modelName);

        /// <summary>
        /// Get logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">the the log request</param>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <returns>ApiResponse of LogBatch</returns>
        ApiResponse<LogBatch> LogsWithHttpInfo (LogRequest body, string deploymentName, string modelName);
        /// <summary>
        /// Represents all of the labels for a given classification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input NDArray</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>MultiClassClassificationResult</returns>
        MultiClassClassificationResult Multiclassify (Prediction body, string modelURI);

        /// <summary>
        /// Represents all of the labels for a given classification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input NDArray</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>ApiResponse of MultiClassClassificationResult</returns>
        ApiResponse<MultiClassClassificationResult> MulticlassifyWithHttpInfo (Prediction body, string modelURI);
        /// <summary>
        /// Run inference on the input array.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input NDArray</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>Prediction</returns>
        Prediction Predict (Prediction body, string modelURI);

        /// <summary>
        /// Run inference on the input array.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input NDArray</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>ApiResponse of Prediction</returns>
        ApiResponse<Prediction> PredictWithHttpInfo (Prediction body, string modelURI);
        /// <summary>
        /// Run inference on the input array, using input image file from multipart form data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelURI">The URI of the model</param>
        /// <param name="image">The file to upload. (optional)</param>
        /// <returns>Prediction</returns>
        Prediction Predictimage (string modelURI, System.IO.Stream image = null);

        /// <summary>
        /// Run inference on the input array, using input image file from multipart form data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelURI">The URI of the model</param>
        /// <param name="image">The file to upload. (optional)</param>
        /// <returns>ApiResponse of Prediction</returns>
        ApiResponse<Prediction> PredictimageWithHttpInfo (string modelURI, System.IO.Stream image = null);
        /// <summary>
        /// Preprocesses the input and run inference on it
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input array</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>Prediction</returns>
        Prediction Predictwithpreprocess (List<string> body, string modelURI);

        /// <summary>
        /// Preprocesses the input and run inference on it
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input array</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>ApiResponse of Prediction</returns>
        ApiResponse<Prediction> PredictwithpreprocessWithHttpInfo (List<string> body, string modelURI);
        /// <summary>
        /// Preprocesses the input and run inference on it and returns it as a JsonArrayResponse
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input array</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>JsonArrayResponse</returns>
        JsonArrayResponse Predictwithpreprocessjson (List<string> body, string modelURI);

        /// <summary>
        /// Preprocesses the input and run inference on it and returns it as a JsonArrayResponse
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input array</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>ApiResponse of JsonArrayResponse</returns>
        ApiResponse<JsonArrayResponse> PredictwithpreprocessjsonWithHttpInfo (List<string> body, string modelURI);
        /// <summary>
        /// Change the state of model to \&quot;start\&quot; or \&quot;stop\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">ID of model</param>
        /// <param name="body">the state request</param>
        /// <returns>Object</returns>
        Object UpdateState (string deploymentId, string modelId, UpdateState body);

        /// <summary>
        /// Change the state of model to \&quot;start\&quot; or \&quot;stop\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">ID of model</param>
        /// <param name="body">the state request</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateStateWithHttpInfo (string deploymentId, string modelId, UpdateState body);
        /// <summary>
        /// Upload a model file to SKIL for import.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. (optional)</param>
        /// <returns>FileUploadList</returns>
        FileUploadList Upload (System.IO.Stream file = null);

        /// <summary>
        /// Upload a model file to SKIL for import.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. (optional)</param>
        /// <returns>ApiResponse of FileUploadList</returns>
        ApiResponse<FileUploadList> UploadWithHttpInfo (System.IO.Stream file = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Use the deployed model to classify the input
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input NDArray</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>Task of ClassificationResult</returns>
        System.Threading.Tasks.Task<ClassificationResult> ClassifyAsync (Prediction body, string modelURI);

        /// <summary>
        /// Use the deployed model to classify the input
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input NDArray</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>Task of ApiResponse (ClassificationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClassificationResult>> ClassifyAsyncWithHttpInfo (Prediction body, string modelURI);
        /// <summary>
        /// Same as /classify but returns the output as Base64NDArrayBody
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input NDArray</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>Task of Base64NDArrayBody</returns>
        System.Threading.Tasks.Task<Base64NDArrayBody> ClassifyarrayAsync (Prediction body, string modelURI);

        /// <summary>
        /// Same as /classify but returns the output as Base64NDArrayBody
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input NDArray</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>Task of ApiResponse (Base64NDArrayBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<Base64NDArrayBody>> ClassifyarrayAsyncWithHttpInfo (Prediction body, string modelURI);
        /// <summary>
        /// Use the deployed model to classify the input, using input image file from multipart form data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelURI">The URI of the model</param>
        /// <param name="image">The file to upload. (optional)</param>
        /// <returns>Task of ClassificationResult</returns>
        System.Threading.Tasks.Task<ClassificationResult> ClassifyimageAsync (string modelURI, System.IO.Stream image = null);

        /// <summary>
        /// Use the deployed model to classify the input, using input image file from multipart form data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelURI">The URI of the model</param>
        /// <param name="image">The file to upload. (optional)</param>
        /// <returns>Task of ApiResponse (ClassificationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClassificationResult>> ClassifyimageAsyncWithHttpInfo (string modelURI, System.IO.Stream image = null);
        /// <summary>
        /// Deploy a model in a deployment group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="body">the deployment request</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeployModelAsync (string deploymentId, DeployModel body);

        /// <summary>
        /// Deploy a model in a deployment group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="body">the deployment request</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeployModelAsyncWithHttpInfo (string deploymentId, DeployModel body);
        /// <summary>
        /// Create a new deployment group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">the deployment request</param>
        /// <returns>Task of Deployment</returns>
        System.Threading.Tasks.Task<Deployment> DeploymentCreateAsync (NewDeployment body);

        /// <summary>
        /// Create a new deployment group.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">the deployment request</param>
        /// <returns>Task of ApiResponse (Deployment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Deployment>> DeploymentCreateAsyncWithHttpInfo (NewDeployment body);
        /// <summary>
        /// Run inference on the input and returns it as a JsonArrayResponse
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input NDArray</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>Task of JsonArrayResponse</returns>
        System.Threading.Tasks.Task<JsonArrayResponse> JsonarrayAsync (Prediction body, string modelURI);

        /// <summary>
        /// Run inference on the input and returns it as a JsonArrayResponse
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input NDArray</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>Task of ApiResponse (JsonArrayResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonArrayResponse>> JsonarrayAsyncWithHttpInfo (Prediction body, string modelURI);
        /// <summary>
        /// Get logs file path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> LogfilepathAsync (string deploymentName, string modelName);

        /// <summary>
        /// Get logs file path
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> LogfilepathAsyncWithHttpInfo (string deploymentName, string modelName);
        /// <summary>
        /// Post JSON credentials and obtain a JWT authorization token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Login credentials.</param>
        /// <returns>Task of Token</returns>
        System.Threading.Tasks.Task<Token> LoginAsync (Credentials credentials);

        /// <summary>
        /// Post JSON credentials and obtain a JWT authorization token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Login credentials.</param>
        /// <returns>Task of ApiResponse (Token)</returns>
        System.Threading.Tasks.Task<ApiResponse<Token>> LoginAsyncWithHttpInfo (Credentials credentials);
        /// <summary>
        /// Get logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">the the log request</param>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <returns>Task of LogBatch</returns>
        System.Threading.Tasks.Task<LogBatch> LogsAsync (LogRequest body, string deploymentName, string modelName);

        /// <summary>
        /// Get logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">the the log request</param>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <returns>Task of ApiResponse (LogBatch)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogBatch>> LogsAsyncWithHttpInfo (LogRequest body, string deploymentName, string modelName);
        /// <summary>
        /// Represents all of the labels for a given classification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input NDArray</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>Task of MultiClassClassificationResult</returns>
        System.Threading.Tasks.Task<MultiClassClassificationResult> MulticlassifyAsync (Prediction body, string modelURI);

        /// <summary>
        /// Represents all of the labels for a given classification
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input NDArray</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>Task of ApiResponse (MultiClassClassificationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<MultiClassClassificationResult>> MulticlassifyAsyncWithHttpInfo (Prediction body, string modelURI);
        /// <summary>
        /// Run inference on the input array.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input NDArray</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>Task of Prediction</returns>
        System.Threading.Tasks.Task<Prediction> PredictAsync (Prediction body, string modelURI);

        /// <summary>
        /// Run inference on the input array.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input NDArray</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>Task of ApiResponse (Prediction)</returns>
        System.Threading.Tasks.Task<ApiResponse<Prediction>> PredictAsyncWithHttpInfo (Prediction body, string modelURI);
        /// <summary>
        /// Run inference on the input array, using input image file from multipart form data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelURI">The URI of the model</param>
        /// <param name="image">The file to upload. (optional)</param>
        /// <returns>Task of Prediction</returns>
        System.Threading.Tasks.Task<Prediction> PredictimageAsync (string modelURI, System.IO.Stream image = null);

        /// <summary>
        /// Run inference on the input array, using input image file from multipart form data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelURI">The URI of the model</param>
        /// <param name="image">The file to upload. (optional)</param>
        /// <returns>Task of ApiResponse (Prediction)</returns>
        System.Threading.Tasks.Task<ApiResponse<Prediction>> PredictimageAsyncWithHttpInfo (string modelURI, System.IO.Stream image = null);
        /// <summary>
        /// Preprocesses the input and run inference on it
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input array</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>Task of Prediction</returns>
        System.Threading.Tasks.Task<Prediction> PredictwithpreprocessAsync (List<string> body, string modelURI);

        /// <summary>
        /// Preprocesses the input and run inference on it
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input array</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>Task of ApiResponse (Prediction)</returns>
        System.Threading.Tasks.Task<ApiResponse<Prediction>> PredictwithpreprocessAsyncWithHttpInfo (List<string> body, string modelURI);
        /// <summary>
        /// Preprocesses the input and run inference on it and returns it as a JsonArrayResponse
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input array</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>Task of JsonArrayResponse</returns>
        System.Threading.Tasks.Task<JsonArrayResponse> PredictwithpreprocessjsonAsync (List<string> body, string modelURI);

        /// <summary>
        /// Preprocesses the input and run inference on it and returns it as a JsonArrayResponse
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input array</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>Task of ApiResponse (JsonArrayResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonArrayResponse>> PredictwithpreprocessjsonAsyncWithHttpInfo (List<string> body, string modelURI);
        /// <summary>
        /// Change the state of model to \&quot;start\&quot; or \&quot;stop\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">ID of model</param>
        /// <param name="body">the state request</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateStateAsync (string deploymentId, string modelId, UpdateState body);

        /// <summary>
        /// Change the state of model to \&quot;start\&quot; or \&quot;stop\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">ID of model</param>
        /// <param name="body">the state request</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateStateAsyncWithHttpInfo (string deploymentId, string modelId, UpdateState body);
        /// <summary>
        /// Upload a model file to SKIL for import.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. (optional)</param>
        /// <returns>Task of FileUploadList</returns>
        System.Threading.Tasks.Task<FileUploadList> UploadAsync (System.IO.Stream file = null);

        /// <summary>
        /// Upload a model file to SKIL for import.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. (optional)</param>
        /// <returns>Task of ApiResponse (FileUploadList)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileUploadList>> UploadAsyncWithHttpInfo (System.IO.Stream file = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private Skymind.SKIL.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Skymind.SKIL.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Skymind.SKIL.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Skymind.SKIL.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Use the deployed model to classify the input 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input NDArray</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>ClassificationResult</returns>
        public ClassificationResult Classify (Prediction body, string modelURI)
        {
             ApiResponse<ClassificationResult> localVarResponse = ClassifyWithHttpInfo(body, modelURI);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Use the deployed model to classify the input 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input NDArray</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>ApiResponse of ClassificationResult</returns>
        public ApiResponse< ClassificationResult > ClassifyWithHttpInfo (Prediction body, string modelURI)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->Classify");
            // verify the required parameter 'modelURI' is set
            if (modelURI == null)
                throw new ApiException(400, "Missing required parameter 'modelURI' when calling DefaultApi->Classify");

            var localVarPath = "/endpoints/{modelURI}/default/classify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelURI != null) localVarPathParams.Add("modelURI", Configuration.ApiClient.ParameterToString(modelURI)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Classify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClassificationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClassificationResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClassificationResult)));
        }

        /// <summary>
        /// Use the deployed model to classify the input 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input NDArray</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>Task of ClassificationResult</returns>
        public async System.Threading.Tasks.Task<ClassificationResult> ClassifyAsync (Prediction body, string modelURI)
        {
             ApiResponse<ClassificationResult> localVarResponse = await ClassifyAsyncWithHttpInfo(body, modelURI);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Use the deployed model to classify the input 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input NDArray</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>Task of ApiResponse (ClassificationResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClassificationResult>> ClassifyAsyncWithHttpInfo (Prediction body, string modelURI)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->Classify");
            // verify the required parameter 'modelURI' is set
            if (modelURI == null)
                throw new ApiException(400, "Missing required parameter 'modelURI' when calling DefaultApi->Classify");

            var localVarPath = "/endpoints/{modelURI}/default/classify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelURI != null) localVarPathParams.Add("modelURI", Configuration.ApiClient.ParameterToString(modelURI)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Classify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClassificationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClassificationResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClassificationResult)));
        }

        /// <summary>
        /// Same as /classify but returns the output as Base64NDArrayBody 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input NDArray</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>Base64NDArrayBody</returns>
        public Base64NDArrayBody Classifyarray (Prediction body, string modelURI)
        {
             ApiResponse<Base64NDArrayBody> localVarResponse = ClassifyarrayWithHttpInfo(body, modelURI);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Same as /classify but returns the output as Base64NDArrayBody 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input NDArray</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>ApiResponse of Base64NDArrayBody</returns>
        public ApiResponse< Base64NDArrayBody > ClassifyarrayWithHttpInfo (Prediction body, string modelURI)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->Classifyarray");
            // verify the required parameter 'modelURI' is set
            if (modelURI == null)
                throw new ApiException(400, "Missing required parameter 'modelURI' when calling DefaultApi->Classifyarray");

            var localVarPath = "/endpoints/{modelURI}/default/classifyarray";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelURI != null) localVarPathParams.Add("modelURI", Configuration.ApiClient.ParameterToString(modelURI)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Classifyarray", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Base64NDArrayBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Base64NDArrayBody) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Base64NDArrayBody)));
        }

        /// <summary>
        /// Same as /classify but returns the output as Base64NDArrayBody 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input NDArray</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>Task of Base64NDArrayBody</returns>
        public async System.Threading.Tasks.Task<Base64NDArrayBody> ClassifyarrayAsync (Prediction body, string modelURI)
        {
             ApiResponse<Base64NDArrayBody> localVarResponse = await ClassifyarrayAsyncWithHttpInfo(body, modelURI);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Same as /classify but returns the output as Base64NDArrayBody 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input NDArray</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>Task of ApiResponse (Base64NDArrayBody)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Base64NDArrayBody>> ClassifyarrayAsyncWithHttpInfo (Prediction body, string modelURI)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->Classifyarray");
            // verify the required parameter 'modelURI' is set
            if (modelURI == null)
                throw new ApiException(400, "Missing required parameter 'modelURI' when calling DefaultApi->Classifyarray");

            var localVarPath = "/endpoints/{modelURI}/default/classifyarray";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelURI != null) localVarPathParams.Add("modelURI", Configuration.ApiClient.ParameterToString(modelURI)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Classifyarray", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Base64NDArrayBody>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Base64NDArrayBody) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Base64NDArrayBody)));
        }

        /// <summary>
        /// Use the deployed model to classify the input, using input image file from multipart form data. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelURI">The URI of the model</param>
        /// <param name="image">The file to upload. (optional)</param>
        /// <returns>ClassificationResult</returns>
        public ClassificationResult Classifyimage (string modelURI, System.IO.Stream image = null)
        {
             ApiResponse<ClassificationResult> localVarResponse = ClassifyimageWithHttpInfo(modelURI, image);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Use the deployed model to classify the input, using input image file from multipart form data. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelURI">The URI of the model</param>
        /// <param name="image">The file to upload. (optional)</param>
        /// <returns>ApiResponse of ClassificationResult</returns>
        public ApiResponse< ClassificationResult > ClassifyimageWithHttpInfo (string modelURI, System.IO.Stream image = null)
        {
            // verify the required parameter 'modelURI' is set
            if (modelURI == null)
                throw new ApiException(400, "Missing required parameter 'modelURI' when calling DefaultApi->Classifyimage");

            var localVarPath = "/endpoints/{modelURI}/default/classifyimage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelURI != null) localVarPathParams.Add("modelURI", Configuration.ApiClient.ParameterToString(modelURI)); // path parameter
            if (image != null) localVarFileParams.Add("image", Configuration.ApiClient.ParameterToFile("image", image));

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Classifyimage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClassificationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClassificationResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClassificationResult)));
        }

        /// <summary>
        /// Use the deployed model to classify the input, using input image file from multipart form data. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelURI">The URI of the model</param>
        /// <param name="image">The file to upload. (optional)</param>
        /// <returns>Task of ClassificationResult</returns>
        public async System.Threading.Tasks.Task<ClassificationResult> ClassifyimageAsync (string modelURI, System.IO.Stream image = null)
        {
             ApiResponse<ClassificationResult> localVarResponse = await ClassifyimageAsyncWithHttpInfo(modelURI, image);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Use the deployed model to classify the input, using input image file from multipart form data. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelURI">The URI of the model</param>
        /// <param name="image">The file to upload. (optional)</param>
        /// <returns>Task of ApiResponse (ClassificationResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClassificationResult>> ClassifyimageAsyncWithHttpInfo (string modelURI, System.IO.Stream image = null)
        {
            // verify the required parameter 'modelURI' is set
            if (modelURI == null)
                throw new ApiException(400, "Missing required parameter 'modelURI' when calling DefaultApi->Classifyimage");

            var localVarPath = "/endpoints/{modelURI}/default/classifyimage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelURI != null) localVarPathParams.Add("modelURI", Configuration.ApiClient.ParameterToString(modelURI)); // path parameter
            if (image != null) localVarFileParams.Add("image", Configuration.ApiClient.ParameterToFile("image", image));

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Classifyimage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClassificationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClassificationResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClassificationResult)));
        }

        /// <summary>
        /// Deploy a model in a deployment group. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="body">the deployment request</param>
        /// <returns>Object</returns>
        public Object DeployModel (string deploymentId, DeployModel body)
        {
             ApiResponse<Object> localVarResponse = DeployModelWithHttpInfo(deploymentId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deploy a model in a deployment group. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="body">the deployment request</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeployModelWithHttpInfo (string deploymentId, DeployModel body)
        {
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling DefaultApi->DeployModel");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->DeployModel");

            var localVarPath = "/deployment/{deploymentId}/model";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentId != null) localVarPathParams.Add("deploymentId", Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeployModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Deploy a model in a deployment group. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="body">the deployment request</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeployModelAsync (string deploymentId, DeployModel body)
        {
             ApiResponse<Object> localVarResponse = await DeployModelAsyncWithHttpInfo(deploymentId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deploy a model in a deployment group. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="body">the deployment request</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeployModelAsyncWithHttpInfo (string deploymentId, DeployModel body)
        {
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling DefaultApi->DeployModel");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->DeployModel");

            var localVarPath = "/deployment/{deploymentId}/model";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentId != null) localVarPathParams.Add("deploymentId", Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeployModel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Create a new deployment group. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">the deployment request</param>
        /// <returns>Deployment</returns>
        public Deployment DeploymentCreate (NewDeployment body)
        {
             ApiResponse<Deployment> localVarResponse = DeploymentCreateWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new deployment group. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">the deployment request</param>
        /// <returns>ApiResponse of Deployment</returns>
        public ApiResponse< Deployment > DeploymentCreateWithHttpInfo (NewDeployment body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->DeploymentCreate");

            var localVarPath = "/deployment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeploymentCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Deployment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Deployment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Deployment)));
        }

        /// <summary>
        /// Create a new deployment group. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">the deployment request</param>
        /// <returns>Task of Deployment</returns>
        public async System.Threading.Tasks.Task<Deployment> DeploymentCreateAsync (NewDeployment body)
        {
             ApiResponse<Deployment> localVarResponse = await DeploymentCreateAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new deployment group. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">the deployment request</param>
        /// <returns>Task of ApiResponse (Deployment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Deployment>> DeploymentCreateAsyncWithHttpInfo (NewDeployment body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->DeploymentCreate");

            var localVarPath = "/deployment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeploymentCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Deployment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Deployment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Deployment)));
        }

        /// <summary>
        /// Run inference on the input and returns it as a JsonArrayResponse 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input NDArray</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>JsonArrayResponse</returns>
        public JsonArrayResponse Jsonarray (Prediction body, string modelURI)
        {
             ApiResponse<JsonArrayResponse> localVarResponse = JsonarrayWithHttpInfo(body, modelURI);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Run inference on the input and returns it as a JsonArrayResponse 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input NDArray</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>ApiResponse of JsonArrayResponse</returns>
        public ApiResponse< JsonArrayResponse > JsonarrayWithHttpInfo (Prediction body, string modelURI)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->Jsonarray");
            // verify the required parameter 'modelURI' is set
            if (modelURI == null)
                throw new ApiException(400, "Missing required parameter 'modelURI' when calling DefaultApi->Jsonarray");

            var localVarPath = "/endpoints/{modelURI}/default/jsonarray";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelURI != null) localVarPathParams.Add("modelURI", Configuration.ApiClient.ParameterToString(modelURI)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Jsonarray", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonArrayResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonArrayResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonArrayResponse)));
        }

        /// <summary>
        /// Run inference on the input and returns it as a JsonArrayResponse 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input NDArray</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>Task of JsonArrayResponse</returns>
        public async System.Threading.Tasks.Task<JsonArrayResponse> JsonarrayAsync (Prediction body, string modelURI)
        {
             ApiResponse<JsonArrayResponse> localVarResponse = await JsonarrayAsyncWithHttpInfo(body, modelURI);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Run inference on the input and returns it as a JsonArrayResponse 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input NDArray</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>Task of ApiResponse (JsonArrayResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonArrayResponse>> JsonarrayAsyncWithHttpInfo (Prediction body, string modelURI)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->Jsonarray");
            // verify the required parameter 'modelURI' is set
            if (modelURI == null)
                throw new ApiException(400, "Missing required parameter 'modelURI' when calling DefaultApi->Jsonarray");

            var localVarPath = "/endpoints/{modelURI}/default/jsonarray";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelURI != null) localVarPathParams.Add("modelURI", Configuration.ApiClient.ParameterToString(modelURI)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Jsonarray", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonArrayResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonArrayResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonArrayResponse)));
        }

        /// <summary>
        /// Get logs file path 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <returns>string</returns>
        public string Logfilepath (string deploymentName, string modelName)
        {
             ApiResponse<string> localVarResponse = LogfilepathWithHttpInfo(deploymentName, modelName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get logs file path 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > LogfilepathWithHttpInfo (string deploymentName, string modelName)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Logfilepath");
            // verify the required parameter 'modelName' is set
            if (modelName == null)
                throw new ApiException(400, "Missing required parameter 'modelName' when calling DefaultApi->Logfilepath");

            var localVarPath = "/endpoints/{deploymentName}/model/{modelName}/default/logfilepath";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (modelName != null) localVarPathParams.Add("modelName", Configuration.ApiClient.ParameterToString(modelName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Logfilepath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get logs file path 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> LogfilepathAsync (string deploymentName, string modelName)
        {
             ApiResponse<string> localVarResponse = await LogfilepathAsyncWithHttpInfo(deploymentName, modelName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get logs file path 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> LogfilepathAsyncWithHttpInfo (string deploymentName, string modelName)
        {
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Logfilepath");
            // verify the required parameter 'modelName' is set
            if (modelName == null)
                throw new ApiException(400, "Missing required parameter 'modelName' when calling DefaultApi->Logfilepath");

            var localVarPath = "/endpoints/{deploymentName}/model/{modelName}/default/logfilepath";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (modelName != null) localVarPathParams.Add("modelName", Configuration.ApiClient.ParameterToString(modelName)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Logfilepath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Post JSON credentials and obtain a JWT authorization token. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Login credentials.</param>
        /// <returns>Token</returns>
        public Token Login (Credentials credentials)
        {
             ApiResponse<Token> localVarResponse = LoginWithHttpInfo(credentials);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Post JSON credentials and obtain a JWT authorization token. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Login credentials.</param>
        /// <returns>ApiResponse of Token</returns>
        public ApiResponse< Token > LoginWithHttpInfo (Credentials credentials)
        {
            // verify the required parameter 'credentials' is set
            if (credentials == null)
                throw new ApiException(400, "Missing required parameter 'credentials' when calling DefaultApi->Login");

            var localVarPath = "/login";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (credentials != null && credentials.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(credentials); // http body (model) parameter
            }
            else
            {
                localVarPostBody = credentials; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Login", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Token>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Token) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Token)));
        }

        /// <summary>
        /// Post JSON credentials and obtain a JWT authorization token. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Login credentials.</param>
        /// <returns>Task of Token</returns>
        public async System.Threading.Tasks.Task<Token> LoginAsync (Credentials credentials)
        {
             ApiResponse<Token> localVarResponse = await LoginAsyncWithHttpInfo(credentials);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Post JSON credentials and obtain a JWT authorization token. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="credentials">Login credentials.</param>
        /// <returns>Task of ApiResponse (Token)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Token>> LoginAsyncWithHttpInfo (Credentials credentials)
        {
            // verify the required parameter 'credentials' is set
            if (credentials == null)
                throw new ApiException(400, "Missing required parameter 'credentials' when calling DefaultApi->Login");

            var localVarPath = "/login";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (credentials != null && credentials.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(credentials); // http body (model) parameter
            }
            else
            {
                localVarPostBody = credentials; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Login", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Token>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Token) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Token)));
        }

        /// <summary>
        /// Get logs 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">the the log request</param>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <returns>LogBatch</returns>
        public LogBatch Logs (LogRequest body, string deploymentName, string modelName)
        {
             ApiResponse<LogBatch> localVarResponse = LogsWithHttpInfo(body, deploymentName, modelName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get logs 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">the the log request</param>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <returns>ApiResponse of LogBatch</returns>
        public ApiResponse< LogBatch > LogsWithHttpInfo (LogRequest body, string deploymentName, string modelName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->Logs");
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Logs");
            // verify the required parameter 'modelName' is set
            if (modelName == null)
                throw new ApiException(400, "Missing required parameter 'modelName' when calling DefaultApi->Logs");

            var localVarPath = "/endpoints/{deploymentName}/model/{modelName}/default/logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (modelName != null) localVarPathParams.Add("modelName", Configuration.ApiClient.ParameterToString(modelName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Logs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogBatch>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LogBatch) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogBatch)));
        }

        /// <summary>
        /// Get logs 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">the the log request</param>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <returns>Task of LogBatch</returns>
        public async System.Threading.Tasks.Task<LogBatch> LogsAsync (LogRequest body, string deploymentName, string modelName)
        {
             ApiResponse<LogBatch> localVarResponse = await LogsAsyncWithHttpInfo(body, deploymentName, modelName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get logs 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">the the log request</param>
        /// <param name="deploymentName">Name of the deployment group</param>
        /// <param name="modelName">ID or name of the deployed model</param>
        /// <returns>Task of ApiResponse (LogBatch)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LogBatch>> LogsAsyncWithHttpInfo (LogRequest body, string deploymentName, string modelName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->Logs");
            // verify the required parameter 'deploymentName' is set
            if (deploymentName == null)
                throw new ApiException(400, "Missing required parameter 'deploymentName' when calling DefaultApi->Logs");
            // verify the required parameter 'modelName' is set
            if (modelName == null)
                throw new ApiException(400, "Missing required parameter 'modelName' when calling DefaultApi->Logs");

            var localVarPath = "/endpoints/{deploymentName}/model/{modelName}/default/logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentName != null) localVarPathParams.Add("deploymentName", Configuration.ApiClient.ParameterToString(deploymentName)); // path parameter
            if (modelName != null) localVarPathParams.Add("modelName", Configuration.ApiClient.ParameterToString(modelName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Logs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogBatch>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LogBatch) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogBatch)));
        }

        /// <summary>
        /// Represents all of the labels for a given classification 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input NDArray</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>MultiClassClassificationResult</returns>
        public MultiClassClassificationResult Multiclassify (Prediction body, string modelURI)
        {
             ApiResponse<MultiClassClassificationResult> localVarResponse = MulticlassifyWithHttpInfo(body, modelURI);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Represents all of the labels for a given classification 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input NDArray</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>ApiResponse of MultiClassClassificationResult</returns>
        public ApiResponse< MultiClassClassificationResult > MulticlassifyWithHttpInfo (Prediction body, string modelURI)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->Multiclassify");
            // verify the required parameter 'modelURI' is set
            if (modelURI == null)
                throw new ApiException(400, "Missing required parameter 'modelURI' when calling DefaultApi->Multiclassify");

            var localVarPath = "/endpoints/{modelURI}/default/multiclassify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelURI != null) localVarPathParams.Add("modelURI", Configuration.ApiClient.ParameterToString(modelURI)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Multiclassify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultiClassClassificationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MultiClassClassificationResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultiClassClassificationResult)));
        }

        /// <summary>
        /// Represents all of the labels for a given classification 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input NDArray</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>Task of MultiClassClassificationResult</returns>
        public async System.Threading.Tasks.Task<MultiClassClassificationResult> MulticlassifyAsync (Prediction body, string modelURI)
        {
             ApiResponse<MultiClassClassificationResult> localVarResponse = await MulticlassifyAsyncWithHttpInfo(body, modelURI);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Represents all of the labels for a given classification 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input NDArray</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>Task of ApiResponse (MultiClassClassificationResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MultiClassClassificationResult>> MulticlassifyAsyncWithHttpInfo (Prediction body, string modelURI)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->Multiclassify");
            // verify the required parameter 'modelURI' is set
            if (modelURI == null)
                throw new ApiException(400, "Missing required parameter 'modelURI' when calling DefaultApi->Multiclassify");

            var localVarPath = "/endpoints/{modelURI}/default/multiclassify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelURI != null) localVarPathParams.Add("modelURI", Configuration.ApiClient.ParameterToString(modelURI)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Multiclassify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultiClassClassificationResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MultiClassClassificationResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultiClassClassificationResult)));
        }

        /// <summary>
        /// Run inference on the input array. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input NDArray</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>Prediction</returns>
        public Prediction Predict (Prediction body, string modelURI)
        {
             ApiResponse<Prediction> localVarResponse = PredictWithHttpInfo(body, modelURI);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Run inference on the input array. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input NDArray</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>ApiResponse of Prediction</returns>
        public ApiResponse< Prediction > PredictWithHttpInfo (Prediction body, string modelURI)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->Predict");
            // verify the required parameter 'modelURI' is set
            if (modelURI == null)
                throw new ApiException(400, "Missing required parameter 'modelURI' when calling DefaultApi->Predict");

            var localVarPath = "/endpoints/{modelURI}/default/predict";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelURI != null) localVarPathParams.Add("modelURI", Configuration.ApiClient.ParameterToString(modelURI)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Predict", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Prediction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Prediction) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Prediction)));
        }

        /// <summary>
        /// Run inference on the input array. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input NDArray</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>Task of Prediction</returns>
        public async System.Threading.Tasks.Task<Prediction> PredictAsync (Prediction body, string modelURI)
        {
             ApiResponse<Prediction> localVarResponse = await PredictAsyncWithHttpInfo(body, modelURI);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Run inference on the input array. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input NDArray</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>Task of ApiResponse (Prediction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Prediction>> PredictAsyncWithHttpInfo (Prediction body, string modelURI)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->Predict");
            // verify the required parameter 'modelURI' is set
            if (modelURI == null)
                throw new ApiException(400, "Missing required parameter 'modelURI' when calling DefaultApi->Predict");

            var localVarPath = "/endpoints/{modelURI}/default/predict";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelURI != null) localVarPathParams.Add("modelURI", Configuration.ApiClient.ParameterToString(modelURI)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Predict", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Prediction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Prediction) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Prediction)));
        }

        /// <summary>
        /// Run inference on the input array, using input image file from multipart form data. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelURI">The URI of the model</param>
        /// <param name="image">The file to upload. (optional)</param>
        /// <returns>Prediction</returns>
        public Prediction Predictimage (string modelURI, System.IO.Stream image = null)
        {
             ApiResponse<Prediction> localVarResponse = PredictimageWithHttpInfo(modelURI, image);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Run inference on the input array, using input image file from multipart form data. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelURI">The URI of the model</param>
        /// <param name="image">The file to upload. (optional)</param>
        /// <returns>ApiResponse of Prediction</returns>
        public ApiResponse< Prediction > PredictimageWithHttpInfo (string modelURI, System.IO.Stream image = null)
        {
            // verify the required parameter 'modelURI' is set
            if (modelURI == null)
                throw new ApiException(400, "Missing required parameter 'modelURI' when calling DefaultApi->Predictimage");

            var localVarPath = "/endpoints/{modelURI}/default/predictimage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelURI != null) localVarPathParams.Add("modelURI", Configuration.ApiClient.ParameterToString(modelURI)); // path parameter
            if (image != null) localVarFileParams.Add("image", Configuration.ApiClient.ParameterToFile("image", image));

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Predictimage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Prediction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Prediction) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Prediction)));
        }

        /// <summary>
        /// Run inference on the input array, using input image file from multipart form data. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelURI">The URI of the model</param>
        /// <param name="image">The file to upload. (optional)</param>
        /// <returns>Task of Prediction</returns>
        public async System.Threading.Tasks.Task<Prediction> PredictimageAsync (string modelURI, System.IO.Stream image = null)
        {
             ApiResponse<Prediction> localVarResponse = await PredictimageAsyncWithHttpInfo(modelURI, image);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Run inference on the input array, using input image file from multipart form data. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelURI">The URI of the model</param>
        /// <param name="image">The file to upload. (optional)</param>
        /// <returns>Task of ApiResponse (Prediction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Prediction>> PredictimageAsyncWithHttpInfo (string modelURI, System.IO.Stream image = null)
        {
            // verify the required parameter 'modelURI' is set
            if (modelURI == null)
                throw new ApiException(400, "Missing required parameter 'modelURI' when calling DefaultApi->Predictimage");

            var localVarPath = "/endpoints/{modelURI}/default/predictimage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelURI != null) localVarPathParams.Add("modelURI", Configuration.ApiClient.ParameterToString(modelURI)); // path parameter
            if (image != null) localVarFileParams.Add("image", Configuration.ApiClient.ParameterToFile("image", image));

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Predictimage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Prediction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Prediction) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Prediction)));
        }

        /// <summary>
        /// Preprocesses the input and run inference on it 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input array</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>Prediction</returns>
        public Prediction Predictwithpreprocess (List<string> body, string modelURI)
        {
             ApiResponse<Prediction> localVarResponse = PredictwithpreprocessWithHttpInfo(body, modelURI);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Preprocesses the input and run inference on it 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input array</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>ApiResponse of Prediction</returns>
        public ApiResponse< Prediction > PredictwithpreprocessWithHttpInfo (List<string> body, string modelURI)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->Predictwithpreprocess");
            // verify the required parameter 'modelURI' is set
            if (modelURI == null)
                throw new ApiException(400, "Missing required parameter 'modelURI' when calling DefaultApi->Predictwithpreprocess");

            var localVarPath = "/endpoints/{modelURI}/default/predictwithpreprocess";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelURI != null) localVarPathParams.Add("modelURI", Configuration.ApiClient.ParameterToString(modelURI)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Predictwithpreprocess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Prediction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Prediction) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Prediction)));
        }

        /// <summary>
        /// Preprocesses the input and run inference on it 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input array</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>Task of Prediction</returns>
        public async System.Threading.Tasks.Task<Prediction> PredictwithpreprocessAsync (List<string> body, string modelURI)
        {
             ApiResponse<Prediction> localVarResponse = await PredictwithpreprocessAsyncWithHttpInfo(body, modelURI);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Preprocesses the input and run inference on it 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input array</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>Task of ApiResponse (Prediction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Prediction>> PredictwithpreprocessAsyncWithHttpInfo (List<string> body, string modelURI)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->Predictwithpreprocess");
            // verify the required parameter 'modelURI' is set
            if (modelURI == null)
                throw new ApiException(400, "Missing required parameter 'modelURI' when calling DefaultApi->Predictwithpreprocess");

            var localVarPath = "/endpoints/{modelURI}/default/predictwithpreprocess";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelURI != null) localVarPathParams.Add("modelURI", Configuration.ApiClient.ParameterToString(modelURI)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Predictwithpreprocess", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Prediction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Prediction) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Prediction)));
        }

        /// <summary>
        /// Preprocesses the input and run inference on it and returns it as a JsonArrayResponse 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input array</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>JsonArrayResponse</returns>
        public JsonArrayResponse Predictwithpreprocessjson (List<string> body, string modelURI)
        {
             ApiResponse<JsonArrayResponse> localVarResponse = PredictwithpreprocessjsonWithHttpInfo(body, modelURI);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Preprocesses the input and run inference on it and returns it as a JsonArrayResponse 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input array</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>ApiResponse of JsonArrayResponse</returns>
        public ApiResponse< JsonArrayResponse > PredictwithpreprocessjsonWithHttpInfo (List<string> body, string modelURI)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->Predictwithpreprocessjson");
            // verify the required parameter 'modelURI' is set
            if (modelURI == null)
                throw new ApiException(400, "Missing required parameter 'modelURI' when calling DefaultApi->Predictwithpreprocessjson");

            var localVarPath = "/endpoints/{modelURI}/default/predictwithpreprocessjson";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelURI != null) localVarPathParams.Add("modelURI", Configuration.ApiClient.ParameterToString(modelURI)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Predictwithpreprocessjson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonArrayResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonArrayResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonArrayResponse)));
        }

        /// <summary>
        /// Preprocesses the input and run inference on it and returns it as a JsonArrayResponse 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input array</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>Task of JsonArrayResponse</returns>
        public async System.Threading.Tasks.Task<JsonArrayResponse> PredictwithpreprocessjsonAsync (List<string> body, string modelURI)
        {
             ApiResponse<JsonArrayResponse> localVarResponse = await PredictwithpreprocessjsonAsyncWithHttpInfo(body, modelURI);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Preprocesses the input and run inference on it and returns it as a JsonArrayResponse 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The input array</param>
        /// <param name="modelURI">The URI of the model</param>
        /// <returns>Task of ApiResponse (JsonArrayResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonArrayResponse>> PredictwithpreprocessjsonAsyncWithHttpInfo (List<string> body, string modelURI)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->Predictwithpreprocessjson");
            // verify the required parameter 'modelURI' is set
            if (modelURI == null)
                throw new ApiException(400, "Missing required parameter 'modelURI' when calling DefaultApi->Predictwithpreprocessjson");

            var localVarPath = "/endpoints/{modelURI}/default/predictwithpreprocessjson";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (modelURI != null) localVarPathParams.Add("modelURI", Configuration.ApiClient.ParameterToString(modelURI)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Predictwithpreprocessjson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonArrayResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JsonArrayResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonArrayResponse)));
        }

        /// <summary>
        /// Change the state of model to \&quot;start\&quot; or \&quot;stop\&quot; 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">ID of model</param>
        /// <param name="body">the state request</param>
        /// <returns>Object</returns>
        public Object UpdateState (string deploymentId, string modelId, UpdateState body)
        {
             ApiResponse<Object> localVarResponse = UpdateStateWithHttpInfo(deploymentId, modelId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change the state of model to \&quot;start\&quot; or \&quot;stop\&quot; 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">ID of model</param>
        /// <param name="body">the state request</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateStateWithHttpInfo (string deploymentId, string modelId, UpdateState body)
        {
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling DefaultApi->UpdateState");
            // verify the required parameter 'modelId' is set
            if (modelId == null)
                throw new ApiException(400, "Missing required parameter 'modelId' when calling DefaultApi->UpdateState");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->UpdateState");

            var localVarPath = "/deployment/{deploymentId}/model/{modelId}/state";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentId != null) localVarPathParams.Add("deploymentId", Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter
            if (modelId != null) localVarPathParams.Add("modelId", Configuration.ApiClient.ParameterToString(modelId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Change the state of model to \&quot;start\&quot; or \&quot;stop\&quot; 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">ID of model</param>
        /// <param name="body">the state request</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateStateAsync (string deploymentId, string modelId, UpdateState body)
        {
             ApiResponse<Object> localVarResponse = await UpdateStateAsyncWithHttpInfo(deploymentId, modelId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change the state of model to \&quot;start\&quot; or \&quot;stop\&quot; 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deploymentId">ID deployment group</param>
        /// <param name="modelId">ID of model</param>
        /// <param name="body">the state request</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateStateAsyncWithHttpInfo (string deploymentId, string modelId, UpdateState body)
        {
            // verify the required parameter 'deploymentId' is set
            if (deploymentId == null)
                throw new ApiException(400, "Missing required parameter 'deploymentId' when calling DefaultApi->UpdateState");
            // verify the required parameter 'modelId' is set
            if (modelId == null)
                throw new ApiException(400, "Missing required parameter 'modelId' when calling DefaultApi->UpdateState");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->UpdateState");

            var localVarPath = "/deployment/{deploymentId}/model/{modelId}/state";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (deploymentId != null) localVarPathParams.Add("deploymentId", Configuration.ApiClient.ParameterToString(deploymentId)); // path parameter
            if (modelId != null) localVarPathParams.Add("modelId", Configuration.ApiClient.ParameterToString(modelId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Upload a model file to SKIL for import. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. (optional)</param>
        /// <returns>FileUploadList</returns>
        public FileUploadList Upload (System.IO.Stream file = null)
        {
             ApiResponse<FileUploadList> localVarResponse = UploadWithHttpInfo(file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload a model file to SKIL for import. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. (optional)</param>
        /// <returns>ApiResponse of FileUploadList</returns>
        public ApiResponse< FileUploadList > UploadWithHttpInfo (System.IO.Stream file = null)
        {

            var localVarPath = "/api/upload/model";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Upload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileUploadList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileUploadList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileUploadList)));
        }

        /// <summary>
        /// Upload a model file to SKIL for import. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. (optional)</param>
        /// <returns>Task of FileUploadList</returns>
        public async System.Threading.Tasks.Task<FileUploadList> UploadAsync (System.IO.Stream file = null)
        {
             ApiResponse<FileUploadList> localVarResponse = await UploadAsyncWithHttpInfo(file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload a model file to SKIL for import. 
        /// </summary>
        /// <exception cref="Skymind.SKIL.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload. (optional)</param>
        /// <returns>Task of ApiResponse (FileUploadList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FileUploadList>> UploadAsyncWithHttpInfo (System.IO.Stream file = null)
        {

            var localVarPath = "/api/upload/model";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Upload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileUploadList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileUploadList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileUploadList)));
        }

    }
}
