/* 
 * Endpoints
 *
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.1.0-beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Skymind.SKIL.Client;
using Skymind.SKIL.Api;
using Skymind.SKIL.Model;

namespace Skymind.SKIL.Test
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DefaultApiTests
    {
        private DefaultApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DefaultApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DefaultApi
            //Assert.IsInstanceOfType(typeof(DefaultApi), instance, "instance is a DefaultApi");
        }

        
        /// <summary>
        /// Test AddEvaluationResult
        /// </summary>
        [Test]
        public void AddEvaluationResultTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EvaluationResultsEntity evaluationResultsEntity = null;
            //var response = instance.AddEvaluationResult(evaluationResultsEntity);
            //Assert.IsInstanceOf<EvaluationResultsEntity> (response, "response is EvaluationResultsEntity");
        }
        
        /// <summary>
        /// Test AddExampleForBatch
        /// </summary>
        [Test]
        public void AddExampleForBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AddExampleRequest addExampleRequest = null;
            //var response = instance.AddExampleForBatch(addExampleRequest);
            //Assert.IsInstanceOf<AddExampleRequest> (response, "response is AddExampleRequest");
        }
        
        /// <summary>
        /// Test AddExampleToMinibatch
        /// </summary>
        [Test]
        public void AddExampleToMinibatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ExampleEntity exampleEntity = null;
            //var response = instance.AddExampleToMinibatch(exampleEntity);
            //Assert.IsInstanceOf<ExampleEntity> (response, "response is ExampleEntity");
        }
        
        /// <summary>
        /// Test AddExperiment
        /// </summary>
        [Test]
        public void AddExperimentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ExperimentEntity experimentEntity = null;
            //var response = instance.AddExperiment(experimentEntity);
            //Assert.IsInstanceOf<ExperimentEntity> (response, "response is ExperimentEntity");
        }
        
        /// <summary>
        /// Test AddMinibatch
        /// </summary>
        [Test]
        public void AddMinibatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MinibatchEntity minibatchEntity = null;
            //var response = instance.AddMinibatch(minibatchEntity);
            //Assert.IsInstanceOf<MinibatchEntity> (response, "response is MinibatchEntity");
        }
        
        /// <summary>
        /// Test AddModelFeedback
        /// </summary>
        [Test]
        public void AddModelFeedbackTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModelFeedBackRequest modelFeedBackRequest = null;
            //var response = instance.AddModelFeedback(modelFeedBackRequest);
            //Assert.IsInstanceOf<ModelFeedBackRequest> (response, "response is ModelFeedBackRequest");
        }
        
        /// <summary>
        /// Test AddModelHistory
        /// </summary>
        [Test]
        public void AddModelHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AddModelHistoryRequest addModelHistoryRequest = null;
            //var response = instance.AddModelHistory(addModelHistoryRequest);
            //Assert.IsInstanceOf<ModelHistoryEntity> (response, "response is ModelHistoryEntity");
        }
        
        /// <summary>
        /// Test AddModelInstance
        /// </summary>
        [Test]
        public void AddModelInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModelInstanceEntity modelInstanceEntity = null;
            //var response = instance.AddModelInstance(modelInstanceEntity);
            //Assert.IsInstanceOf<ModelInstanceEntity> (response, "response is ModelInstanceEntity");
        }
        
        /// <summary>
        /// Test AggregateModelResults
        /// </summary>
        [Test]
        public void AggregateModelResultsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AggregatePrediction aggregatePrediction = null;
            //var response = instance.AggregateModelResults(aggregatePrediction);
            //Assert.IsInstanceOf<EvaluationResultsEntity> (response, "response is EvaluationResultsEntity");
        }
        
        /// <summary>
        /// Test Classify
        /// </summary>
        [Test]
        public void ClassifyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Prediction body = null;
            //string deploymentName = null;
            //string modelName = null;
            //var response = instance.Classify(body, deploymentName, modelName);
            //Assert.IsInstanceOf<ClassificationResult> (response, "response is ClassificationResult");
        }
        
        /// <summary>
        /// Test Classifyarray
        /// </summary>
        [Test]
        public void ClassifyarrayTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Prediction body = null;
            //string deploymentName = null;
            //string modelName = null;
            //var response = instance.Classifyarray(body, deploymentName, modelName);
            //Assert.IsInstanceOf<Base64NDArrayBody> (response, "response is Base64NDArrayBody");
        }
        
        /// <summary>
        /// Test Classifyimage
        /// </summary>
        [Test]
        public void ClassifyimageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string modelName = null;
            //System.IO.Stream image = null;
            //var response = instance.Classifyimage(deploymentName, modelName, image);
            //Assert.IsInstanceOf<ClassificationResult> (response, "response is ClassificationResult");
        }
        
        /// <summary>
        /// Test CreateModelHistory
        /// </summary>
        [Test]
        public void CreateModelHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModelHistoryEntity modelHistoryEntity = null;
            //var response = instance.CreateModelHistory(modelHistoryEntity);
            //Assert.IsInstanceOf<ModelHistoryEntity> (response, "response is ModelHistoryEntity");
        }
        
        /// <summary>
        /// Test DeleteExperiment
        /// </summary>
        [Test]
        public void DeleteExperimentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string experimentID = null;
            //var response = instance.DeleteExperiment(experimentID);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test DeleteModel
        /// </summary>
        [Test]
        public void DeleteModelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentId = null;
            //string modelId = null;
            //var response = instance.DeleteModel(deploymentId, modelId);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test DeleteModelHistory
        /// </summary>
        [Test]
        public void DeleteModelHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryID = null;
            //var response = instance.DeleteModelHistory(modelHistoryID);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test DeleteModelInstance
        /// </summary>
        [Test]
        public void DeleteModelInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelInstanceID = null;
            //instance.DeleteModelInstance(modelInstanceID);
            
        }
        
        /// <summary>
        /// Test DeployModel
        /// </summary>
        [Test]
        public void DeployModelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentId = null;
            //ImportModelRequest body = null;
            //var response = instance.DeployModel(deploymentId, body);
            //Assert.IsInstanceOf<ModelEntity> (response, "response is ModelEntity");
        }
        
        /// <summary>
        /// Test DeploymentCreate
        /// </summary>
        [Test]
        public void DeploymentCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateDeploymentRequest body = null;
            //var response = instance.DeploymentCreate(body);
            //Assert.IsInstanceOf<DeploymentResponse> (response, "response is DeploymentResponse");
        }
        
        /// <summary>
        /// Test DeploymentDelete
        /// </summary>
        [Test]
        public void DeploymentDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentId = null;
            //var response = instance.DeploymentDelete(deploymentId);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test DeploymentGet
        /// </summary>
        [Test]
        public void DeploymentGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentId = null;
            //var response = instance.DeploymentGet(deploymentId);
            //Assert.IsInstanceOf<DeploymentResponse> (response, "response is DeploymentResponse");
        }
        
        /// <summary>
        /// Test Deployments
        /// </summary>
        [Test]
        public void DeploymentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.Deployments();
            //Assert.IsInstanceOf<List<DeploymentResponse>> (response, "response is List<DeploymentResponse>");
        }
        
        /// <summary>
        /// Test Detectobjects
        /// </summary>
        [Test]
        public void DetectobjectsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //bool? needsPreprocessing = null;
            //float? threshold = null;
            //System.IO.Stream imageFile = null;
            //string deploymentName = null;
            //string modelName = null;
            //var response = instance.Detectobjects(id, needsPreprocessing, threshold, imageFile, deploymentName, modelName);
            //Assert.IsInstanceOf<DetectionResult> (response, "response is DetectionResult");
        }
        
        /// <summary>
        /// Test GetBestModelAmongModelIds
        /// </summary>
        [Test]
        public void GetBestModelAmongModelIdsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BestModel bestModel = null;
            //var response = instance.GetBestModelAmongModelIds(bestModel);
            //Assert.IsInstanceOf<ModelInstanceEntity> (response, "response is ModelInstanceEntity");
        }
        
        /// <summary>
        /// Test GetEvaluationForModelID
        /// </summary>
        [Test]
        public void GetEvaluationForModelIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelInstanceID = null;
            //var response = instance.GetEvaluationForModelID(modelInstanceID);
            //Assert.IsInstanceOf<List<EvaluationResultsEntity>> (response, "response is List<EvaluationResultsEntity>");
        }
        
        /// <summary>
        /// Test GetExamplesForMinibatch
        /// </summary>
        [Test]
        public void GetExamplesForMinibatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string minibatchId = null;
            //var response = instance.GetExamplesForMinibatch(minibatchId);
            //Assert.IsInstanceOf<List<ExampleEntity>> (response, "response is List<ExampleEntity>");
        }
        
        /// <summary>
        /// Test GetExperiment
        /// </summary>
        [Test]
        public void GetExperimentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string experimentID = null;
            //var response = instance.GetExperiment(experimentID);
            //Assert.IsInstanceOf<ExperimentEntity> (response, "response is ExperimentEntity");
        }
        
        /// <summary>
        /// Test GetExperimentsForModelHistory
        /// </summary>
        [Test]
        public void GetExperimentsForModelHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryID = null;
            //var response = instance.GetExperimentsForModelHistory(modelHistoryID);
            //Assert.IsInstanceOf<ExperimentEntity> (response, "response is ExperimentEntity");
        }
        
        /// <summary>
        /// Test GetMinibatch
        /// </summary>
        [Test]
        public void GetMinibatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string minibatchId = null;
            //var response = instance.GetMinibatch(minibatchId);
            //Assert.IsInstanceOf<MinibatchEntity> (response, "response is MinibatchEntity");
        }
        
        /// <summary>
        /// Test GetModelHistory
        /// </summary>
        [Test]
        public void GetModelHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryID = null;
            //var response = instance.GetModelHistory(modelHistoryID);
            //Assert.IsInstanceOf<ModelHistoryEntity> (response, "response is ModelHistoryEntity");
        }
        
        /// <summary>
        /// Test GetModelInstance
        /// </summary>
        [Test]
        public void GetModelInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelInstanceID = null;
            //var response = instance.GetModelInstance(modelInstanceID);
            //Assert.IsInstanceOf<ModelInstanceEntity> (response, "response is ModelInstanceEntity");
        }
        
        /// <summary>
        /// Test GetModelsForExperiment
        /// </summary>
        [Test]
        public void GetModelsForExperimentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string experimentID = null;
            //var response = instance.GetModelsForExperiment(experimentID);
            //Assert.IsInstanceOf<List<ModelInstanceEntity>> (response, "response is List<ModelInstanceEntity>");
        }
        
        /// <summary>
        /// Test ImagetransformprocessGet
        /// </summary>
        [Test]
        public void ImagetransformprocessGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string imageTransformName = null;
            //var response = instance.ImagetransformprocessGet(deploymentName, imageTransformName);
            //Assert.IsInstanceOf<ImageTransformProcess> (response, "response is ImageTransformProcess");
        }
        
        /// <summary>
        /// Test ImagetransformprocessPost
        /// </summary>
        [Test]
        public void ImagetransformprocessPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string imageTransformName = null;
            //ImageTransformProcess body = null;
            //var response = instance.ImagetransformprocessPost(deploymentName, imageTransformName, body);
            //Assert.IsInstanceOf<ImageTransformProcess> (response, "response is ImageTransformProcess");
        }
        
        /// <summary>
        /// Test Jsonarray
        /// </summary>
        [Test]
        public void JsonarrayTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Prediction body = null;
            //string deploymentName = null;
            //string modelName = null;
            //var response = instance.Jsonarray(body, deploymentName, modelName);
            //Assert.IsInstanceOf<JsonArrayResponse> (response, "response is JsonArrayResponse");
        }
        
        /// <summary>
        /// Test Knn
        /// </summary>
        [Test]
        public void KnnTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string knnName = null;
            //NearestNeighborRequest body = null;
            //var response = instance.Knn(deploymentName, knnName, body);
            //Assert.IsInstanceOf<NearestNeighborsResults> (response, "response is NearestNeighborsResults");
        }
        
        /// <summary>
        /// Test Knnnew
        /// </summary>
        [Test]
        public void KnnnewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string knnName = null;
            //Base64NDArrayBodyKNN body = null;
            //var response = instance.Knnnew(deploymentName, knnName, body);
            //Assert.IsInstanceOf<NearestNeighborsResults> (response, "response is NearestNeighborsResults");
        }
        
        /// <summary>
        /// Test ListAllExperiments
        /// </summary>
        [Test]
        public void ListAllExperimentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ListAllExperiments();
            //Assert.IsInstanceOf<List<ExperimentEntity>> (response, "response is List<ExperimentEntity>");
        }
        
        /// <summary>
        /// Test Logfilepath
        /// </summary>
        [Test]
        public void LogfilepathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string modelName = null;
            //var response = instance.Logfilepath(deploymentName, modelName);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test Login
        /// </summary>
        [Test]
        public void LoginTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Credentials credentials = null;
            //var response = instance.Login(credentials);
            //Assert.IsInstanceOf<Token> (response, "response is Token");
        }
        
        /// <summary>
        /// Test Logs
        /// </summary>
        [Test]
        public void LogsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //LogRequest body = null;
            //string deploymentName = null;
            //string modelName = null;
            //var response = instance.Logs(body, deploymentName, modelName);
            //Assert.IsInstanceOf<LogBatch> (response, "response is LogBatch");
        }
        
        /// <summary>
        /// Test MetaGet
        /// </summary>
        [Test]
        public void MetaGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string modelName = null;
            //var response = instance.MetaGet(deploymentName, modelName);
            //Assert.IsInstanceOf<MetaData> (response, "response is MetaData");
        }
        
        /// <summary>
        /// Test MetaPost
        /// </summary>
        [Test]
        public void MetaPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MetaData body = null;
            //string deploymentName = null;
            //string modelName = null;
            //var response = instance.MetaPost(body, deploymentName, modelName);
            //Assert.IsInstanceOf<MetaData> (response, "response is MetaData");
        }
        
        /// <summary>
        /// Test ModelStateChange
        /// </summary>
        [Test]
        public void ModelStateChangeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentId = null;
            //string modelId = null;
            //SetState body = null;
            //var response = instance.ModelStateChange(deploymentId, modelId, body);
            //Assert.IsInstanceOf<ModelEntity> (response, "response is ModelEntity");
        }
        
        /// <summary>
        /// Test Models
        /// </summary>
        [Test]
        public void ModelsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentId = null;
            //var response = instance.Models(deploymentId);
            //Assert.IsInstanceOf<List<ModelEntity>> (response, "response is List<ModelEntity>");
        }
        
        /// <summary>
        /// Test Modelset
        /// </summary>
        [Test]
        public void ModelsetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string modelName = null;
            //System.IO.Stream file = null;
            //var response = instance.Modelset(deploymentName, modelName, file);
            //Assert.IsInstanceOf<ModelStatus> (response, "response is ModelStatus");
        }
        
        /// <summary>
        /// Test Modelupdate
        /// </summary>
        [Test]
        public void ModelupdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string modelName = null;
            //System.IO.Stream file = null;
            //var response = instance.Modelupdate(deploymentName, modelName, file);
            //Assert.IsInstanceOf<ModelStatus> (response, "response is ModelStatus");
        }
        
        /// <summary>
        /// Test Multiclassify
        /// </summary>
        [Test]
        public void MulticlassifyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Prediction body = null;
            //string deploymentName = null;
            //string modelName = null;
            //var response = instance.Multiclassify(body, deploymentName, modelName);
            //Assert.IsInstanceOf<MultiClassClassificationResult> (response, "response is MultiClassClassificationResult");
        }
        
        /// <summary>
        /// Test Multipredict
        /// </summary>
        [Test]
        public void MultipredictTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MultiPredictRequest body = null;
            //string deploymentName = null;
            //string modelName = null;
            //var response = instance.Multipredict(body, deploymentName, modelName);
            //Assert.IsInstanceOf<MultiPredictResponse> (response, "response is MultiPredictResponse");
        }
        
        /// <summary>
        /// Test Multipredictimage
        /// </summary>
        [Test]
        public void MultipredictimageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream file = null;
            //string id = null;
            //bool? needsPreprocessing = null;
            //string deploymentName = null;
            //string modelName = null;
            //var response = instance.Multipredictimage(file, id, needsPreprocessing, deploymentName, modelName);
            //Assert.IsInstanceOf<MultiPredictResponse> (response, "response is MultiPredictResponse");
        }
        
        /// <summary>
        /// Test Predict
        /// </summary>
        [Test]
        public void PredictTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Prediction body = null;
            //string deploymentName = null;
            //string modelName = null;
            //var response = instance.Predict(body, deploymentName, modelName);
            //Assert.IsInstanceOf<Prediction> (response, "response is Prediction");
        }
        
        /// <summary>
        /// Test Predictimage
        /// </summary>
        [Test]
        public void PredictimageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string modelName = null;
            //System.IO.Stream image = null;
            //var response = instance.Predictimage(deploymentName, modelName, image);
            //Assert.IsInstanceOf<Prediction> (response, "response is Prediction");
        }
        
        /// <summary>
        /// Test Predictwithpreprocess
        /// </summary>
        [Test]
        public void PredictwithpreprocessTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> body = null;
            //string deploymentName = null;
            //string modelName = null;
            //var response = instance.Predictwithpreprocess(body, deploymentName, modelName);
            //Assert.IsInstanceOf<Prediction> (response, "response is Prediction");
        }
        
        /// <summary>
        /// Test Predictwithpreprocessjson
        /// </summary>
        [Test]
        public void PredictwithpreprocessjsonTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> body = null;
            //string deploymentName = null;
            //string modelName = null;
            //var response = instance.Predictwithpreprocessjson(body, deploymentName, modelName);
            //Assert.IsInstanceOf<JsonArrayResponse> (response, "response is JsonArrayResponse");
        }
        
        /// <summary>
        /// Test ReimportModel
        /// </summary>
        [Test]
        public void ReimportModelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentId = null;
            //string modelId = null;
            //ImportModelRequest body = null;
            //var response = instance.ReimportModel(deploymentId, modelId, body);
            //Assert.IsInstanceOf<ModelEntity> (response, "response is ModelEntity");
        }
        
        /// <summary>
        /// Test TransformCsv
        /// </summary>
        [Test]
        public void TransformCsvTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string transformName = null;
            //BatchCSVRecord batchCSVRecord = null;
            //var response = instance.TransformCsv(deploymentName, transformName, batchCSVRecord);
            //Assert.IsInstanceOf<BatchCSVRecord> (response, "response is BatchCSVRecord");
        }
        
        /// <summary>
        /// Test TransformarrayCsv
        /// </summary>
        [Test]
        public void TransformarrayCsvTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string transformName = null;
            //BatchCSVRecord batchCSVRecord = null;
            //var response = instance.TransformarrayCsv(deploymentName, transformName, batchCSVRecord);
            //Assert.IsInstanceOf<Base64NDArrayBody> (response, "response is Base64NDArrayBody");
        }
        
        /// <summary>
        /// Test TransformarrayImage
        /// </summary>
        [Test]
        public void TransformarrayImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string imageTransformName = null;
            //BatchImageRecord batchImageRecord = null;
            //var response = instance.TransformarrayImage(deploymentName, imageTransformName, batchImageRecord);
            //Assert.IsInstanceOf<Base64NDArrayBody> (response, "response is Base64NDArrayBody");
        }
        
        /// <summary>
        /// Test Transformimage
        /// </summary>
        [Test]
        public void TransformimageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string imageTransformName = null;
            //List<byte[]> files = null;
            //var response = instance.Transformimage(deploymentName, imageTransformName, files);
            //Assert.IsInstanceOf<Base64NDArrayBody> (response, "response is Base64NDArrayBody");
        }
        
        /// <summary>
        /// Test TransformincrementalCsv
        /// </summary>
        [Test]
        public void TransformincrementalCsvTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string transformName = null;
            //SingleCSVRecord singleCSVRecord = null;
            //var response = instance.TransformincrementalCsv(deploymentName, transformName, singleCSVRecord);
            //Assert.IsInstanceOf<SingleCSVRecord> (response, "response is SingleCSVRecord");
        }
        
        /// <summary>
        /// Test TransformincrementalarrayCsv
        /// </summary>
        [Test]
        public void TransformincrementalarrayCsvTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string transformName = null;
            //SingleCSVRecord singleCSVRecord = null;
            //var response = instance.TransformincrementalarrayCsv(deploymentName, transformName, singleCSVRecord);
            //Assert.IsInstanceOf<Base64NDArrayBody> (response, "response is Base64NDArrayBody");
        }
        
        /// <summary>
        /// Test TransformincrementalarrayImage
        /// </summary>
        [Test]
        public void TransformincrementalarrayImageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string imageTransformName = null;
            //SingleImageRecord singleImageRecord = null;
            //var response = instance.TransformincrementalarrayImage(deploymentName, imageTransformName, singleImageRecord);
            //Assert.IsInstanceOf<Base64NDArrayBody> (response, "response is Base64NDArrayBody");
        }
        
        /// <summary>
        /// Test Transformincrementalimage
        /// </summary>
        [Test]
        public void TransformincrementalimageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string imageTransformName = null;
            //System.IO.Stream file = null;
            //var response = instance.Transformincrementalimage(deploymentName, imageTransformName, file);
            //Assert.IsInstanceOf<Base64NDArrayBody> (response, "response is Base64NDArrayBody");
        }
        
        /// <summary>
        /// Test TransformprocessGet
        /// </summary>
        [Test]
        public void TransformprocessGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string transformName = null;
            //var response = instance.TransformprocessGet(deploymentName, transformName);
            //Assert.IsInstanceOf<TransformProcess> (response, "response is TransformProcess");
        }
        
        /// <summary>
        /// Test TransformprocessPost
        /// </summary>
        [Test]
        public void TransformprocessPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deploymentName = null;
            //string transformName = null;
            //TransformProcess transformProcess = null;
            //instance.TransformprocessPost(deploymentName, transformName, transformProcess);
            
        }
        
        /// <summary>
        /// Test UpdateBestModelForExperiment
        /// </summary>
        [Test]
        public void UpdateBestModelForExperimentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateBestModel updateBestModel = null;
            //var response = instance.UpdateBestModelForExperiment(updateBestModel);
            //Assert.IsInstanceOf<ExperimentEntity> (response, "response is ExperimentEntity");
        }
        
        /// <summary>
        /// Test UpdateExperiment
        /// </summary>
        [Test]
        public void UpdateExperimentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string experimentID = null;
            //ExperimentEntity experimentEntity = null;
            //var response = instance.UpdateExperiment(experimentID, experimentEntity);
            //Assert.IsInstanceOf<ExperimentEntity> (response, "response is ExperimentEntity");
        }
        
        /// <summary>
        /// Test UpdateModelHistory
        /// </summary>
        [Test]
        public void UpdateModelHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string modelHistoryID = null;
            //AddModelHistoryRequest updateModelHistoryRequest = null;
            //var response = instance.UpdateModelHistory(modelHistoryID, updateModelHistoryRequest);
            //Assert.IsInstanceOf<ModelHistoryEntity> (response, "response is ModelHistoryEntity");
        }
        
        /// <summary>
        /// Test Upload
        /// </summary>
        [Test]
        public void UploadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream file = null;
            //var response = instance.Upload(file);
            //Assert.IsInstanceOf<FileUploadList> (response, "response is FileUploadList");
        }
        
    }

}
