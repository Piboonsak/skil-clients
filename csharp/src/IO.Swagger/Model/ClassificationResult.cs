/* 
 * Predict
 *
 * Endpoints API for classification and other prediction services in SKIL
 *
 * OpenAPI spec version: 1.0.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ClassificationResult
    /// </summary>
    [DataContract]
    public partial class ClassificationResult :  IEquatable<ClassificationResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClassificationResult" /> class.
        /// </summary>
        /// <param name="Results">index classification results for the minibatch.</param>
        /// <param name="Probabilities">max probabilities for the batch items.</param>
        /// <param name="MinibatchId">minibatch ID.</param>
        public ClassificationResult(List<int?> Results = default(List<int?>), List<decimal?> Probabilities = default(List<decimal?>), string MinibatchId = default(string))
        {
            this.Results = Results;
            this.Probabilities = Probabilities;
            this.MinibatchId = MinibatchId;
        }
        
        /// <summary>
        /// index classification results for the minibatch
        /// </summary>
        /// <value>index classification results for the minibatch</value>
        [DataMember(Name="results", EmitDefaultValue=false)]
        public List<int?> Results { get; set; }

        /// <summary>
        /// max probabilities for the batch items
        /// </summary>
        /// <value>max probabilities for the batch items</value>
        [DataMember(Name="probabilities", EmitDefaultValue=false)]
        public List<decimal?> Probabilities { get; set; }

        /// <summary>
        /// minibatch ID
        /// </summary>
        /// <value>minibatch ID</value>
        [DataMember(Name="minibatchId", EmitDefaultValue=false)]
        public string MinibatchId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClassificationResult {\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("  Probabilities: ").Append(Probabilities).Append("\n");
            sb.Append("  MinibatchId: ").Append(MinibatchId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ClassificationResult);
        }

        /// <summary>
        /// Returns true if ClassificationResult instances are equal
        /// </summary>
        /// <param name="input">Instance of ClassificationResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClassificationResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Results == input.Results ||
                    this.Results != null &&
                    this.Results.SequenceEqual(input.Results)
                ) && 
                (
                    this.Probabilities == input.Probabilities ||
                    this.Probabilities != null &&
                    this.Probabilities.SequenceEqual(input.Probabilities)
                ) && 
                (
                    this.MinibatchId == input.MinibatchId ||
                    (this.MinibatchId != null &&
                    this.MinibatchId.Equals(input.MinibatchId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Results != null)
                    hashCode = hashCode * 59 + this.Results.GetHashCode();
                if (this.Probabilities != null)
                    hashCode = hashCode * 59 + this.Probabilities.GetHashCode();
                if (this.MinibatchId != null)
                    hashCode = hashCode * 59 + this.MinibatchId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
