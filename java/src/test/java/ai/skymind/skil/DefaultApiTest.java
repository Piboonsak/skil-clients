/*
 * Predict
 * Endpoints API for classification and other prediction services in SKIL
 *
 * OpenAPI spec version: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ai.skymind.skil;

import ai.skymind.ApiException;
import ai.skymind.skil.model.Base64NDArrayBody;
import ai.skymind.skil.model.ClassificationResult;
import java.io.File;
import ai.skymind.skil.model.JsonArrayResponse;
import ai.skymind.skil.model.LogBatch;
import ai.skymind.skil.model.LogRequest;
import ai.skymind.skil.model.ModelStatus;
import ai.skymind.skil.model.MultiClassClassificationResult;
import ai.skymind.skil.model.Prediction;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * Use the deployed model to classify the input
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void classifyTest() throws ApiException {
        Prediction body = null;
        String deploymentName = null;
        String modelName = null;
        ClassificationResult response = api.classify(body, deploymentName, modelName);

        // TODO: test validations
    }
    
    /**
     * Same as /classify but returns the output as Base64NDArrayBody
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void classifyarrayTest() throws ApiException {
        Prediction body = null;
        String deploymentName = null;
        String modelName = null;
        Base64NDArrayBody response = api.classifyarray(body, deploymentName, modelName);

        // TODO: test validations
    }
    
    /**
     * Use the deployed model to classify the input, using input image file from multipart form data.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void classifyimageTest() throws ApiException {
        String deploymentName = null;
        String modelName = null;
        File image = null;
        ClassificationResult response = api.classifyimage(deploymentName, modelName, image);

        // TODO: test validations
    }
    
    /**
     * Run inference on the input and returns it as a JsonArrayResponse
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void jsonarrayTest() throws ApiException {
        Prediction body = null;
        String deploymentName = null;
        String modelName = null;
        JsonArrayResponse response = api.jsonarray(body, deploymentName, modelName);

        // TODO: test validations
    }
    
    /**
     * Get logs file path
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void logfilepathTest() throws ApiException {
        String deploymentName = null;
        String modelName = null;
        String response = api.logfilepath(deploymentName, modelName);

        // TODO: test validations
    }
    
    /**
     * Get logs
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void logsTest() throws ApiException {
        LogRequest body = null;
        String deploymentName = null;
        String modelName = null;
        LogBatch response = api.logs(body, deploymentName, modelName);

        // TODO: test validations
    }
    
    /**
     * Set the model to be served
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void modelsetTest() throws ApiException {
        String deploymentName = null;
        String modelName = null;
        File file = null;
        ModelStatus response = api.modelset(deploymentName, modelName, file);

        // TODO: test validations
    }
    
    /**
     * Update the model to be served
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void modelupdateTest() throws ApiException {
        String deploymentName = null;
        String modelName = null;
        File file = null;
        ModelStatus response = api.modelupdate(deploymentName, modelName, file);

        // TODO: test validations
    }
    
    /**
     * Represents all of the labels for a given classification
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void multiclassifyTest() throws ApiException {
        Prediction body = null;
        String deploymentName = null;
        String modelName = null;
        MultiClassClassificationResult response = api.multiclassify(body, deploymentName, modelName);

        // TODO: test validations
    }
    
    /**
     * Run inference on the input array.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void predictTest() throws ApiException {
        Prediction body = null;
        String deploymentName = null;
        String modelName = null;
        Prediction response = api.predict(body, deploymentName, modelName);

        // TODO: test validations
    }
    
    /**
     * Run inference on the input array, using input image file from multipart form data.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void predict_0Test() throws ApiException {
        String deploymentName = null;
        String modelName = null;
        File image = null;
        Prediction response = api.predict_0(deploymentName, modelName, image);

        // TODO: test validations
    }
    
    /**
     * Preprocesses the input and run inference on it
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void predictwithpreprocessTest() throws ApiException {
        List<String> body = null;
        String deploymentName = null;
        String modelName = null;
        Prediction response = api.predictwithpreprocess(body, deploymentName, modelName);

        // TODO: test validations
    }
    
    /**
     * Preprocesses the input and run inference on it and returns it as a JsonArrayResponse
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void predictwithpreprocessjsonTest() throws ApiException {
        List<String> body = null;
        String deploymentName = null;
        String modelName = null;
        JsonArrayResponse response = api.predictwithpreprocessjson(body, deploymentName, modelName);

        // TODO: test validations
    }
    
}
