/* 
 * Endpoints
 *
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.1.0-beta
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Base64NdArrayBodyKnn {
  /// the array to run the search on. Note that this must be a row vector
  #[serde(rename = "ndarray")]
  ndarray: String,
  /// the number of results to retrieve
  #[serde(rename = "k")]
  k: i32,
  /// If 'True' it will brute force search for running search relative to a target but forced to fill the result list until the desired k is matched.
  #[serde(rename = "forceFillK")]
  force_fill_k: Option<bool>
}

impl Base64NdArrayBodyKnn {
  pub fn new(ndarray: String, k: i32) -> Base64NdArrayBodyKnn {
    Base64NdArrayBodyKnn {
      ndarray: ndarray,
      k: k,
      force_fill_k: None
    }
  }

  pub fn set_ndarray(&mut self, ndarray: String) {
    self.ndarray = ndarray;
  }

  pub fn with_ndarray(mut self, ndarray: String) -> Base64NdArrayBodyKnn {
    self.ndarray = ndarray;
    self
  }

  pub fn ndarray(&self) -> &String {
    &self.ndarray
  }


  pub fn set_k(&mut self, k: i32) {
    self.k = k;
  }

  pub fn with_k(mut self, k: i32) -> Base64NdArrayBodyKnn {
    self.k = k;
    self
  }

  pub fn k(&self) -> &i32 {
    &self.k
  }


  pub fn set_force_fill_k(&mut self, force_fill_k: bool) {
    self.force_fill_k = Some(force_fill_k);
  }

  pub fn with_force_fill_k(mut self, force_fill_k: bool) -> Base64NdArrayBodyKnn {
    self.force_fill_k = Some(force_fill_k);
    self
  }

  pub fn force_fill_k(&self) -> Option<&bool> {
    self.force_fill_k.as_ref()
  }

  pub fn reset_force_fill_k(&mut self) {
    self.force_fill_k = None;
  }

}



