/**
 * Predict
 * Endpoints API for classification and other prediction services in SKIL
 *
 * OpenAPI spec version: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ai.skymind.skil;

import ai.skymind.ApiInvoker;
import ai.skymind.ApiException;
import ai.skymind.Pair;

import ai.skymind.skil.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import ai.skymind.skil.model.Base64NDArrayBody;
import ai.skymind.skil.model.ClassificationResult;
import java.io.File;
import ai.skymind.skil.model.JsonArrayResponse;
import java.util.*;
import ai.skymind.skil.model.LogBatch;
import ai.skymind.skil.model.LogRequest;
import ai.skymind.skil.model.ModelStatus;
import ai.skymind.skil.model.MultiClassClassificationResult;
import ai.skymind.skil.model.Prediction;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class DefaultApi {
  String basePath = "https://localhost:9008/endpoints";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Use the deployed model to classify the input
  * 
   * @param body The input NDArray
   * @param deploymentName Name of the deployment group
   * @param modelName ID or name of the deployed model
   * @return ClassificationResult
  */
  public ClassificationResult classify (Prediction body, String deploymentName, String modelName) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling classify",
        new ApiException(400, "Missing the required parameter 'body' when calling classify"));
    }
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling classify",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling classify"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling classify",
        new ApiException(400, "Missing the required parameter 'modelName' when calling classify"));
    }

    // create path and map variables
    String path = "/{deploymentName}/model/{modelName}/default/classify".replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ClassificationResult) ApiInvoker.deserialize(localVarResponse, "", ClassificationResult.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Use the deployed model to classify the input
   * 
   * @param body The input NDArray   * @param deploymentName Name of the deployment group   * @param modelName ID or name of the deployed model
  */
  public void classify (Prediction body, String deploymentName, String modelName, final Response.Listener<ClassificationResult> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling classify",
        new ApiException(400, "Missing the required parameter 'body' when calling classify"));
    }
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling classify",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling classify"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling classify",
        new ApiException(400, "Missing the required parameter 'modelName' when calling classify"));
    }

    // create path and map variables
    String path = "/{deploymentName}/model/{modelName}/default/classify".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ClassificationResult) ApiInvoker.deserialize(localVarResponse,  "", ClassificationResult.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Same as /classify but returns the output as Base64NDArrayBody
  * 
   * @param body The input NDArray
   * @param deploymentName Name of the deployment group
   * @param modelName ID or name of the deployed model
   * @return Base64NDArrayBody
  */
  public Base64NDArrayBody classifyarray (Prediction body, String deploymentName, String modelName) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling classifyarray",
        new ApiException(400, "Missing the required parameter 'body' when calling classifyarray"));
    }
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling classifyarray",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling classifyarray"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling classifyarray",
        new ApiException(400, "Missing the required parameter 'modelName' when calling classifyarray"));
    }

    // create path and map variables
    String path = "/{deploymentName}/model/{modelName}/default/classifyarray".replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Base64NDArrayBody) ApiInvoker.deserialize(localVarResponse, "", Base64NDArrayBody.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Same as /classify but returns the output as Base64NDArrayBody
   * 
   * @param body The input NDArray   * @param deploymentName Name of the deployment group   * @param modelName ID or name of the deployed model
  */
  public void classifyarray (Prediction body, String deploymentName, String modelName, final Response.Listener<Base64NDArrayBody> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling classifyarray",
        new ApiException(400, "Missing the required parameter 'body' when calling classifyarray"));
    }
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling classifyarray",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling classifyarray"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling classifyarray",
        new ApiException(400, "Missing the required parameter 'modelName' when calling classifyarray"));
    }

    // create path and map variables
    String path = "/{deploymentName}/model/{modelName}/default/classifyarray".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Base64NDArrayBody) ApiInvoker.deserialize(localVarResponse,  "", Base64NDArrayBody.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Use the deployed model to classify the input, using input image file from multipart form data.
  * 
   * @param deploymentName Name of the deployment group
   * @param modelName ID or name of the deployed model
   * @param image The file to upload.
   * @return ClassificationResult
  */
  public ClassificationResult classifyimage (String deploymentName, String modelName, File image) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling classifyimage",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling classifyimage"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling classifyimage",
        new ApiException(400, "Missing the required parameter 'modelName' when calling classifyimage"));
    }

    // create path and map variables
    String path = "/{deploymentName}/model/{modelName}/default/classifyimage".replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (image != null) {
        localVarBuilder.addBinaryBody("image", image);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ClassificationResult) ApiInvoker.deserialize(localVarResponse, "", ClassificationResult.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Use the deployed model to classify the input, using input image file from multipart form data.
   * 
   * @param deploymentName Name of the deployment group   * @param modelName ID or name of the deployed model   * @param image The file to upload.
  */
  public void classifyimage (String deploymentName, String modelName, File image, final Response.Listener<ClassificationResult> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling classifyimage",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling classifyimage"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling classifyimage",
        new ApiException(400, "Missing the required parameter 'modelName' when calling classifyimage"));
    }

    // create path and map variables
    String path = "/{deploymentName}/model/{modelName}/default/classifyimage".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (image != null) {
        localVarBuilder.addBinaryBody("image", image);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      
    }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ClassificationResult) ApiInvoker.deserialize(localVarResponse,  "", ClassificationResult.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Run inference on the input and returns it as a JsonArrayResponse
  * 
   * @param body The input NDArray
   * @param deploymentName Name of the deployment group
   * @param modelName ID or name of the deployed model
   * @return JsonArrayResponse
  */
  public JsonArrayResponse jsonarray (Prediction body, String deploymentName, String modelName) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling jsonarray",
        new ApiException(400, "Missing the required parameter 'body' when calling jsonarray"));
    }
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling jsonarray",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling jsonarray"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling jsonarray",
        new ApiException(400, "Missing the required parameter 'modelName' when calling jsonarray"));
    }

    // create path and map variables
    String path = "/{deploymentName}/model/{modelName}/default/jsonarray".replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (JsonArrayResponse) ApiInvoker.deserialize(localVarResponse, "", JsonArrayResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Run inference on the input and returns it as a JsonArrayResponse
   * 
   * @param body The input NDArray   * @param deploymentName Name of the deployment group   * @param modelName ID or name of the deployed model
  */
  public void jsonarray (Prediction body, String deploymentName, String modelName, final Response.Listener<JsonArrayResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling jsonarray",
        new ApiException(400, "Missing the required parameter 'body' when calling jsonarray"));
    }
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling jsonarray",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling jsonarray"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling jsonarray",
        new ApiException(400, "Missing the required parameter 'modelName' when calling jsonarray"));
    }

    // create path and map variables
    String path = "/{deploymentName}/model/{modelName}/default/jsonarray".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((JsonArrayResponse) ApiInvoker.deserialize(localVarResponse,  "", JsonArrayResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get logs file path
  * 
   * @param deploymentName Name of the deployment group
   * @param modelName ID or name of the deployed model
   * @return String
  */
  public String logfilepath (String deploymentName, String modelName) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling logfilepath",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling logfilepath"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling logfilepath",
        new ApiException(400, "Missing the required parameter 'modelName' when calling logfilepath"));
    }

    // create path and map variables
    String path = "/{deploymentName}/model/{modelName}/default/logfilepath".replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get logs file path
   * 
   * @param deploymentName Name of the deployment group   * @param modelName ID or name of the deployed model
  */
  public void logfilepath (String deploymentName, String modelName, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling logfilepath",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling logfilepath"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling logfilepath",
        new ApiException(400, "Missing the required parameter 'modelName' when calling logfilepath"));
    }

    // create path and map variables
    String path = "/{deploymentName}/model/{modelName}/default/logfilepath".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get logs
  * 
   * @param body the the log request
   * @param deploymentName Name of the deployment group
   * @param modelName ID or name of the deployed model
   * @return LogBatch
  */
  public LogBatch logs (LogRequest body, String deploymentName, String modelName) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling logs",
        new ApiException(400, "Missing the required parameter 'body' when calling logs"));
    }
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling logs",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling logs"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling logs",
        new ApiException(400, "Missing the required parameter 'modelName' when calling logs"));
    }

    // create path and map variables
    String path = "/{deploymentName}/model/{modelName}/default/logs".replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (LogBatch) ApiInvoker.deserialize(localVarResponse, "", LogBatch.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get logs
   * 
   * @param body the the log request   * @param deploymentName Name of the deployment group   * @param modelName ID or name of the deployed model
  */
  public void logs (LogRequest body, String deploymentName, String modelName, final Response.Listener<LogBatch> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling logs",
        new ApiException(400, "Missing the required parameter 'body' when calling logs"));
    }
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling logs",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling logs"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling logs",
        new ApiException(400, "Missing the required parameter 'modelName' when calling logs"));
    }

    // create path and map variables
    String path = "/{deploymentName}/model/{modelName}/default/logs".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((LogBatch) ApiInvoker.deserialize(localVarResponse,  "", LogBatch.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Set the model to be served
  * 
   * @param deploymentName Name of the deployment group
   * @param modelName ID or name of the deployed model
   * @param file The model file to upload (.pb file)
   * @return ModelStatus
  */
  public ModelStatus modelset (String deploymentName, String modelName, File file) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling modelset",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling modelset"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling modelset",
        new ApiException(400, "Missing the required parameter 'modelName' when calling modelset"));
    }

    // create path and map variables
    String path = "/{deploymentName}/model/{modelName}/default/modelset".replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (file != null) {
        localVarBuilder.addBinaryBody("file", file);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ModelStatus) ApiInvoker.deserialize(localVarResponse, "", ModelStatus.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Set the model to be served
   * 
   * @param deploymentName Name of the deployment group   * @param modelName ID or name of the deployed model   * @param file The model file to upload (.pb file)
  */
  public void modelset (String deploymentName, String modelName, File file, final Response.Listener<ModelStatus> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling modelset",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling modelset"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling modelset",
        new ApiException(400, "Missing the required parameter 'modelName' when calling modelset"));
    }

    // create path and map variables
    String path = "/{deploymentName}/model/{modelName}/default/modelset".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (file != null) {
        localVarBuilder.addBinaryBody("file", file);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      
    }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ModelStatus) ApiInvoker.deserialize(localVarResponse,  "", ModelStatus.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update the model to be served
  * 
   * @param deploymentName Name of the deployment group
   * @param modelName ID or name of the deployed model
   * @param file The model file to update with (.pb file)
   * @return ModelStatus
  */
  public ModelStatus modelupdate (String deploymentName, String modelName, File file) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling modelupdate",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling modelupdate"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling modelupdate",
        new ApiException(400, "Missing the required parameter 'modelName' when calling modelupdate"));
    }

    // create path and map variables
    String path = "/{deploymentName}/model/{modelName}/default/modelupdate".replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (file != null) {
        localVarBuilder.addBinaryBody("file", file);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ModelStatus) ApiInvoker.deserialize(localVarResponse, "", ModelStatus.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update the model to be served
   * 
   * @param deploymentName Name of the deployment group   * @param modelName ID or name of the deployed model   * @param file The model file to update with (.pb file)
  */
  public void modelupdate (String deploymentName, String modelName, File file, final Response.Listener<ModelStatus> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling modelupdate",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling modelupdate"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling modelupdate",
        new ApiException(400, "Missing the required parameter 'modelName' when calling modelupdate"));
    }

    // create path and map variables
    String path = "/{deploymentName}/model/{modelName}/default/modelupdate".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (file != null) {
        localVarBuilder.addBinaryBody("file", file);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      
    }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ModelStatus) ApiInvoker.deserialize(localVarResponse,  "", ModelStatus.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Represents all of the labels for a given classification
  * 
   * @param body The input NDArray
   * @param deploymentName Name of the deployment group
   * @param modelName ID or name of the deployed model
   * @return MultiClassClassificationResult
  */
  public MultiClassClassificationResult multiclassify (Prediction body, String deploymentName, String modelName) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling multiclassify",
        new ApiException(400, "Missing the required parameter 'body' when calling multiclassify"));
    }
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling multiclassify",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling multiclassify"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling multiclassify",
        new ApiException(400, "Missing the required parameter 'modelName' when calling multiclassify"));
    }

    // create path and map variables
    String path = "/{deploymentName}/model/{modelName}/default/multiclassify".replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (MultiClassClassificationResult) ApiInvoker.deserialize(localVarResponse, "", MultiClassClassificationResult.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Represents all of the labels for a given classification
   * 
   * @param body The input NDArray   * @param deploymentName Name of the deployment group   * @param modelName ID or name of the deployed model
  */
  public void multiclassify (Prediction body, String deploymentName, String modelName, final Response.Listener<MultiClassClassificationResult> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling multiclassify",
        new ApiException(400, "Missing the required parameter 'body' when calling multiclassify"));
    }
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling multiclassify",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling multiclassify"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling multiclassify",
        new ApiException(400, "Missing the required parameter 'modelName' when calling multiclassify"));
    }

    // create path and map variables
    String path = "/{deploymentName}/model/{modelName}/default/multiclassify".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((MultiClassClassificationResult) ApiInvoker.deserialize(localVarResponse,  "", MultiClassClassificationResult.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Run inference on the input array.
  * 
   * @param body The input NDArray
   * @param deploymentName Name of the deployment group
   * @param modelName ID or name of the deployed model
   * @return Prediction
  */
  public Prediction predict (Prediction body, String deploymentName, String modelName) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling predict",
        new ApiException(400, "Missing the required parameter 'body' when calling predict"));
    }
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling predict",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling predict"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling predict",
        new ApiException(400, "Missing the required parameter 'modelName' when calling predict"));
    }

    // create path and map variables
    String path = "/{deploymentName}/model/{modelName}/default/predict".replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Prediction) ApiInvoker.deserialize(localVarResponse, "", Prediction.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Run inference on the input array.
   * 
   * @param body The input NDArray   * @param deploymentName Name of the deployment group   * @param modelName ID or name of the deployed model
  */
  public void predict (Prediction body, String deploymentName, String modelName, final Response.Listener<Prediction> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling predict",
        new ApiException(400, "Missing the required parameter 'body' when calling predict"));
    }
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling predict",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling predict"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling predict",
        new ApiException(400, "Missing the required parameter 'modelName' when calling predict"));
    }

    // create path and map variables
    String path = "/{deploymentName}/model/{modelName}/default/predict".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Prediction) ApiInvoker.deserialize(localVarResponse,  "", Prediction.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Run inference on the input array, using input image file from multipart form data.
  * 
   * @param deploymentName Name of the deployment group
   * @param modelName ID or name of the deployed model
   * @param image The file to upload.
   * @return Prediction
  */
  public Prediction predict_1 (String deploymentName, String modelName, File image) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling predict_1",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling predict_1"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling predict_1",
        new ApiException(400, "Missing the required parameter 'modelName' when calling predict_1"));
    }

    // create path and map variables
    String path = "/{deploymentName}/model/{modelName}/default/predictimage".replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (image != null) {
        localVarBuilder.addBinaryBody("image", image);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Prediction) ApiInvoker.deserialize(localVarResponse, "", Prediction.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Run inference on the input array, using input image file from multipart form data.
   * 
   * @param deploymentName Name of the deployment group   * @param modelName ID or name of the deployed model   * @param image The file to upload.
  */
  public void predict_1 (String deploymentName, String modelName, File image, final Response.Listener<Prediction> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling predict_1",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling predict_1"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling predict_1",
        new ApiException(400, "Missing the required parameter 'modelName' when calling predict_1"));
    }

    // create path and map variables
    String path = "/{deploymentName}/model/{modelName}/default/predictimage".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (image != null) {
        localVarBuilder.addBinaryBody("image", image);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      
    }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Prediction) ApiInvoker.deserialize(localVarResponse,  "", Prediction.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Preprocesses the input and run inference on it
  * 
   * @param body The input array
   * @param deploymentName Name of the deployment group
   * @param modelName ID or name of the deployed model
   * @return Prediction
  */
  public Prediction predictwithpreprocess (List<String> body, String deploymentName, String modelName) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling predictwithpreprocess",
        new ApiException(400, "Missing the required parameter 'body' when calling predictwithpreprocess"));
    }
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling predictwithpreprocess",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling predictwithpreprocess"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling predictwithpreprocess",
        new ApiException(400, "Missing the required parameter 'modelName' when calling predictwithpreprocess"));
    }

    // create path and map variables
    String path = "/{deploymentName}/model/{modelName}/default/predictwithpreprocess".replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Prediction) ApiInvoker.deserialize(localVarResponse, "", Prediction.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Preprocesses the input and run inference on it
   * 
   * @param body The input array   * @param deploymentName Name of the deployment group   * @param modelName ID or name of the deployed model
  */
  public void predictwithpreprocess (List<String> body, String deploymentName, String modelName, final Response.Listener<Prediction> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling predictwithpreprocess",
        new ApiException(400, "Missing the required parameter 'body' when calling predictwithpreprocess"));
    }
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling predictwithpreprocess",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling predictwithpreprocess"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling predictwithpreprocess",
        new ApiException(400, "Missing the required parameter 'modelName' when calling predictwithpreprocess"));
    }

    // create path and map variables
    String path = "/{deploymentName}/model/{modelName}/default/predictwithpreprocess".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Prediction) ApiInvoker.deserialize(localVarResponse,  "", Prediction.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Preprocesses the input and run inference on it and returns it as a JsonArrayResponse
  * 
   * @param body The input array
   * @param deploymentName Name of the deployment group
   * @param modelName ID or name of the deployed model
   * @return JsonArrayResponse
  */
  public JsonArrayResponse predictwithpreprocessjson (List<String> body, String deploymentName, String modelName) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling predictwithpreprocessjson",
        new ApiException(400, "Missing the required parameter 'body' when calling predictwithpreprocessjson"));
    }
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling predictwithpreprocessjson",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling predictwithpreprocessjson"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling predictwithpreprocessjson",
        new ApiException(400, "Missing the required parameter 'modelName' when calling predictwithpreprocessjson"));
    }

    // create path and map variables
    String path = "/{deploymentName}/model/{modelName}/default/predictwithpreprocessjson".replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (JsonArrayResponse) ApiInvoker.deserialize(localVarResponse, "", JsonArrayResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Preprocesses the input and run inference on it and returns it as a JsonArrayResponse
   * 
   * @param body The input array   * @param deploymentName Name of the deployment group   * @param modelName ID or name of the deployed model
  */
  public void predictwithpreprocessjson (List<String> body, String deploymentName, String modelName, final Response.Listener<JsonArrayResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling predictwithpreprocessjson",
        new ApiException(400, "Missing the required parameter 'body' when calling predictwithpreprocessjson"));
    }
    // verify the required parameter 'deploymentName' is set
    if (deploymentName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deploymentName' when calling predictwithpreprocessjson",
        new ApiException(400, "Missing the required parameter 'deploymentName' when calling predictwithpreprocessjson"));
    }
    // verify the required parameter 'modelName' is set
    if (modelName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modelName' when calling predictwithpreprocessjson",
        new ApiException(400, "Missing the required parameter 'modelName' when calling predictwithpreprocessjson"));
    }

    // create path and map variables
    String path = "/{deploymentName}/model/{modelName}/default/predictwithpreprocessjson".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deploymentName" + "\\}", apiInvoker.escapeString(deploymentName.toString())).replaceAll("\\{" + "modelName" + "\\}", apiInvoker.escapeString(modelName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((JsonArrayResponse) ApiInvoker.deserialize(localVarResponse,  "", JsonArrayResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
