/**
 * Endpoints
 * Endpoints API for different services in SKIL
 *
 * OpenAPI spec version: 1.1.0-beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ai.skymind;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Date;
import ai.skymind.skil.model.*;

public class JsonUtil {
  public static GsonBuilder gsonBuilder;

  static {
    gsonBuilder = new GsonBuilder();
    gsonBuilder.serializeNulls();
    gsonBuilder.setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    gsonBuilder.registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {
      public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        return new Date(json.getAsJsonPrimitive().getAsLong());
      }
    });
  }

  public static Gson getGson() {
    return gsonBuilder.create();
  }

  public static String serialize(Object obj){
    return getGson().toJson(obj);
  }

  public static <T> T deserializeToList(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getListTypeForDeserialization(cls));
  }

  public static <T> T deserializeToObject(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getTypeForDeserialization(cls));
  }

  public static Type getListTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("AddExampleRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<AddExampleRequest>>(){}.getType();
    }
    
    if ("AddModelHistoryRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<AddModelHistoryRequest>>(){}.getType();
    }
    
    if ("AggregatePrediction".equalsIgnoreCase(className)) {
      return new TypeToken<List<AggregatePrediction>>(){}.getType();
    }
    
    if ("Base64NDArrayBody".equalsIgnoreCase(className)) {
      return new TypeToken<List<Base64NDArrayBody>>(){}.getType();
    }
    
    if ("Base64NDArrayBodyKNN".equalsIgnoreCase(className)) {
      return new TypeToken<List<Base64NDArrayBodyKNN>>(){}.getType();
    }
    
    if ("BatchCSVRecord".equalsIgnoreCase(className)) {
      return new TypeToken<List<BatchCSVRecord>>(){}.getType();
    }
    
    if ("BatchImageRecord".equalsIgnoreCase(className)) {
      return new TypeToken<List<BatchImageRecord>>(){}.getType();
    }
    
    if ("BestModel".equalsIgnoreCase(className)) {
      return new TypeToken<List<BestModel>>(){}.getType();
    }
    
    if ("ClassificationResult".equalsIgnoreCase(className)) {
      return new TypeToken<List<ClassificationResult>>(){}.getType();
    }
    
    if ("CreateDeploymentRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<CreateDeploymentRequest>>(){}.getType();
    }
    
    if ("Credentials".equalsIgnoreCase(className)) {
      return new TypeToken<List<Credentials>>(){}.getType();
    }
    
    if ("DeploymentObjects".equalsIgnoreCase(className)) {
      return new TypeToken<List<DeploymentObjects>>(){}.getType();
    }
    
    if ("DeploymentResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<DeploymentResponse>>(){}.getType();
    }
    
    if ("DetectedObject".equalsIgnoreCase(className)) {
      return new TypeToken<List<DetectedObject>>(){}.getType();
    }
    
    if ("DetectionResult".equalsIgnoreCase(className)) {
      return new TypeToken<List<DetectionResult>>(){}.getType();
    }
    
    if ("EvaluationResultsEntity".equalsIgnoreCase(className)) {
      return new TypeToken<List<EvaluationResultsEntity>>(){}.getType();
    }
    
    if ("ExampleEntity".equalsIgnoreCase(className)) {
      return new TypeToken<List<ExampleEntity>>(){}.getType();
    }
    
    if ("ExperimentEntity".equalsIgnoreCase(className)) {
      return new TypeToken<List<ExperimentEntity>>(){}.getType();
    }
    
    if ("FileUpload".equalsIgnoreCase(className)) {
      return new TypeToken<List<FileUpload>>(){}.getType();
    }
    
    if ("FileUploadList".equalsIgnoreCase(className)) {
      return new TypeToken<List<FileUploadList>>(){}.getType();
    }
    
    if ("INDArray".equalsIgnoreCase(className)) {
      return new TypeToken<List<INDArray>>(){}.getType();
    }
    
    if ("ImageTransformProcess".equalsIgnoreCase(className)) {
      return new TypeToken<List<ImageTransformProcess>>(){}.getType();
    }
    
    if ("ImportModelRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<ImportModelRequest>>(){}.getType();
    }
    
    if ("InlineResponse200".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse200>>(){}.getType();
    }
    
    if ("JsonArrayResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<JsonArrayResponse>>(){}.getType();
    }
    
    if ("LogBatch".equalsIgnoreCase(className)) {
      return new TypeToken<List<LogBatch>>(){}.getType();
    }
    
    if ("LogRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<LogRequest>>(){}.getType();
    }
    
    if ("MetaData".equalsIgnoreCase(className)) {
      return new TypeToken<List<MetaData>>(){}.getType();
    }
    
    if ("MinibatchEntity".equalsIgnoreCase(className)) {
      return new TypeToken<List<MinibatchEntity>>(){}.getType();
    }
    
    if ("ModelEntity".equalsIgnoreCase(className)) {
      return new TypeToken<List<ModelEntity>>(){}.getType();
    }
    
    if ("ModelFeedBackRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<ModelFeedBackRequest>>(){}.getType();
    }
    
    if ("ModelHistoryEntity".equalsIgnoreCase(className)) {
      return new TypeToken<List<ModelHistoryEntity>>(){}.getType();
    }
    
    if ("ModelInstanceEntity".equalsIgnoreCase(className)) {
      return new TypeToken<List<ModelInstanceEntity>>(){}.getType();
    }
    
    if ("ModelResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<ModelResponse>>(){}.getType();
    }
    
    if ("ModelStatus".equalsIgnoreCase(className)) {
      return new TypeToken<List<ModelStatus>>(){}.getType();
    }
    
    if ("MultiClassClassificationResult".equalsIgnoreCase(className)) {
      return new TypeToken<List<MultiClassClassificationResult>>(){}.getType();
    }
    
    if ("MultiPredictRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<MultiPredictRequest>>(){}.getType();
    }
    
    if ("MultiPredictResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<MultiPredictResponse>>(){}.getType();
    }
    
    if ("NearestNeighborRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<NearestNeighborRequest>>(){}.getType();
    }
    
    if ("NearestNeighborsResult".equalsIgnoreCase(className)) {
      return new TypeToken<List<NearestNeighborsResult>>(){}.getType();
    }
    
    if ("NearestNeighborsResults".equalsIgnoreCase(className)) {
      return new TypeToken<List<NearestNeighborsResults>>(){}.getType();
    }
    
    if ("NewDeployment".equalsIgnoreCase(className)) {
      return new TypeToken<List<NewDeployment>>(){}.getType();
    }
    
    if ("Prediction".equalsIgnoreCase(className)) {
      return new TypeToken<List<Prediction>>(){}.getType();
    }
    
    if ("SetState".equalsIgnoreCase(className)) {
      return new TypeToken<List<SetState>>(){}.getType();
    }
    
    if ("SingleCSVRecord".equalsIgnoreCase(className)) {
      return new TypeToken<List<SingleCSVRecord>>(){}.getType();
    }
    
    if ("SingleImageRecord".equalsIgnoreCase(className)) {
      return new TypeToken<List<SingleImageRecord>>(){}.getType();
    }
    
    if ("Token".equalsIgnoreCase(className)) {
      return new TypeToken<List<Token>>(){}.getType();
    }
    
    if ("TransformProcess".equalsIgnoreCase(className)) {
      return new TypeToken<List<TransformProcess>>(){}.getType();
    }
    
    if ("UpdateBestModel".equalsIgnoreCase(className)) {
      return new TypeToken<List<UpdateBestModel>>(){}.getType();
    }
    
    return new TypeToken<List<Object>>(){}.getType();
  }

  public static Type getTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("AddExampleRequest".equalsIgnoreCase(className)) {
      return new TypeToken<AddExampleRequest>(){}.getType();
    }
    
    if ("AddModelHistoryRequest".equalsIgnoreCase(className)) {
      return new TypeToken<AddModelHistoryRequest>(){}.getType();
    }
    
    if ("AggregatePrediction".equalsIgnoreCase(className)) {
      return new TypeToken<AggregatePrediction>(){}.getType();
    }
    
    if ("Base64NDArrayBody".equalsIgnoreCase(className)) {
      return new TypeToken<Base64NDArrayBody>(){}.getType();
    }
    
    if ("Base64NDArrayBodyKNN".equalsIgnoreCase(className)) {
      return new TypeToken<Base64NDArrayBodyKNN>(){}.getType();
    }
    
    if ("BatchCSVRecord".equalsIgnoreCase(className)) {
      return new TypeToken<BatchCSVRecord>(){}.getType();
    }
    
    if ("BatchImageRecord".equalsIgnoreCase(className)) {
      return new TypeToken<BatchImageRecord>(){}.getType();
    }
    
    if ("BestModel".equalsIgnoreCase(className)) {
      return new TypeToken<BestModel>(){}.getType();
    }
    
    if ("ClassificationResult".equalsIgnoreCase(className)) {
      return new TypeToken<ClassificationResult>(){}.getType();
    }
    
    if ("CreateDeploymentRequest".equalsIgnoreCase(className)) {
      return new TypeToken<CreateDeploymentRequest>(){}.getType();
    }
    
    if ("Credentials".equalsIgnoreCase(className)) {
      return new TypeToken<Credentials>(){}.getType();
    }
    
    if ("DeploymentObjects".equalsIgnoreCase(className)) {
      return new TypeToken<DeploymentObjects>(){}.getType();
    }
    
    if ("DeploymentResponse".equalsIgnoreCase(className)) {
      return new TypeToken<DeploymentResponse>(){}.getType();
    }
    
    if ("DetectedObject".equalsIgnoreCase(className)) {
      return new TypeToken<DetectedObject>(){}.getType();
    }
    
    if ("DetectionResult".equalsIgnoreCase(className)) {
      return new TypeToken<DetectionResult>(){}.getType();
    }
    
    if ("EvaluationResultsEntity".equalsIgnoreCase(className)) {
      return new TypeToken<EvaluationResultsEntity>(){}.getType();
    }
    
    if ("ExampleEntity".equalsIgnoreCase(className)) {
      return new TypeToken<ExampleEntity>(){}.getType();
    }
    
    if ("ExperimentEntity".equalsIgnoreCase(className)) {
      return new TypeToken<ExperimentEntity>(){}.getType();
    }
    
    if ("FileUpload".equalsIgnoreCase(className)) {
      return new TypeToken<FileUpload>(){}.getType();
    }
    
    if ("FileUploadList".equalsIgnoreCase(className)) {
      return new TypeToken<FileUploadList>(){}.getType();
    }
    
    if ("INDArray".equalsIgnoreCase(className)) {
      return new TypeToken<INDArray>(){}.getType();
    }
    
    if ("ImageTransformProcess".equalsIgnoreCase(className)) {
      return new TypeToken<ImageTransformProcess>(){}.getType();
    }
    
    if ("ImportModelRequest".equalsIgnoreCase(className)) {
      return new TypeToken<ImportModelRequest>(){}.getType();
    }
    
    if ("InlineResponse200".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse200>(){}.getType();
    }
    
    if ("JsonArrayResponse".equalsIgnoreCase(className)) {
      return new TypeToken<JsonArrayResponse>(){}.getType();
    }
    
    if ("LogBatch".equalsIgnoreCase(className)) {
      return new TypeToken<LogBatch>(){}.getType();
    }
    
    if ("LogRequest".equalsIgnoreCase(className)) {
      return new TypeToken<LogRequest>(){}.getType();
    }
    
    if ("MetaData".equalsIgnoreCase(className)) {
      return new TypeToken<MetaData>(){}.getType();
    }
    
    if ("MinibatchEntity".equalsIgnoreCase(className)) {
      return new TypeToken<MinibatchEntity>(){}.getType();
    }
    
    if ("ModelEntity".equalsIgnoreCase(className)) {
      return new TypeToken<ModelEntity>(){}.getType();
    }
    
    if ("ModelFeedBackRequest".equalsIgnoreCase(className)) {
      return new TypeToken<ModelFeedBackRequest>(){}.getType();
    }
    
    if ("ModelHistoryEntity".equalsIgnoreCase(className)) {
      return new TypeToken<ModelHistoryEntity>(){}.getType();
    }
    
    if ("ModelInstanceEntity".equalsIgnoreCase(className)) {
      return new TypeToken<ModelInstanceEntity>(){}.getType();
    }
    
    if ("ModelResponse".equalsIgnoreCase(className)) {
      return new TypeToken<ModelResponse>(){}.getType();
    }
    
    if ("ModelStatus".equalsIgnoreCase(className)) {
      return new TypeToken<ModelStatus>(){}.getType();
    }
    
    if ("MultiClassClassificationResult".equalsIgnoreCase(className)) {
      return new TypeToken<MultiClassClassificationResult>(){}.getType();
    }
    
    if ("MultiPredictRequest".equalsIgnoreCase(className)) {
      return new TypeToken<MultiPredictRequest>(){}.getType();
    }
    
    if ("MultiPredictResponse".equalsIgnoreCase(className)) {
      return new TypeToken<MultiPredictResponse>(){}.getType();
    }
    
    if ("NearestNeighborRequest".equalsIgnoreCase(className)) {
      return new TypeToken<NearestNeighborRequest>(){}.getType();
    }
    
    if ("NearestNeighborsResult".equalsIgnoreCase(className)) {
      return new TypeToken<NearestNeighborsResult>(){}.getType();
    }
    
    if ("NearestNeighborsResults".equalsIgnoreCase(className)) {
      return new TypeToken<NearestNeighborsResults>(){}.getType();
    }
    
    if ("NewDeployment".equalsIgnoreCase(className)) {
      return new TypeToken<NewDeployment>(){}.getType();
    }
    
    if ("Prediction".equalsIgnoreCase(className)) {
      return new TypeToken<Prediction>(){}.getType();
    }
    
    if ("SetState".equalsIgnoreCase(className)) {
      return new TypeToken<SetState>(){}.getType();
    }
    
    if ("SingleCSVRecord".equalsIgnoreCase(className)) {
      return new TypeToken<SingleCSVRecord>(){}.getType();
    }
    
    if ("SingleImageRecord".equalsIgnoreCase(className)) {
      return new TypeToken<SingleImageRecord>(){}.getType();
    }
    
    if ("Token".equalsIgnoreCase(className)) {
      return new TypeToken<Token>(){}.getType();
    }
    
    if ("TransformProcess".equalsIgnoreCase(className)) {
      return new TypeToken<TransformProcess>(){}.getType();
    }
    
    if ("UpdateBestModel".equalsIgnoreCase(className)) {
      return new TypeToken<UpdateBestModel>(){}.getType();
    }
    
    return new TypeToken<Object>(){}.getType();
  }

};
