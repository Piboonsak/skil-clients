/**
 * Predict
 * Endpoints API for classification and other prediction services in SKIL
 *
 * OpenAPI spec version: 1.1.0-beta
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'ai/skymind/skil/model/Base64NDArrayBody', 'ai/skymind/skil/model/ClassificationResult', 'ai/skymind/skil/model/Credentials', 'ai/skymind/skil/model/DeployModel', 'ai/skymind/skil/model/Deployment', 'ai/skymind/skil/model/FileUploadList', 'ai/skymind/skil/model/JsonArrayResponse', 'ai/skymind/skil/model/LogBatch', 'ai/skymind/skil/model/LogRequest', 'ai/skymind/skil/model/MultiClassClassificationResult', 'ai/skymind/skil/model/NewDeployment', 'ai/skymind/skil/model/Prediction', 'ai/skymind/skil/model/Token', 'ai/skymind/skil/model/UpdateState'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../ai/skymind/skil/model/Base64NDArrayBody'), require('../ai/skymind/skil/model/ClassificationResult'), require('../ai/skymind/skil/model/Credentials'), require('../ai/skymind/skil/model/DeployModel'), require('../ai/skymind/skil/model/Deployment'), require('../ai/skymind/skil/model/FileUploadList'), require('../ai/skymind/skil/model/JsonArrayResponse'), require('../ai/skymind/skil/model/LogBatch'), require('../ai/skymind/skil/model/LogRequest'), require('../ai/skymind/skil/model/MultiClassClassificationResult'), require('../ai/skymind/skil/model/NewDeployment'), require('../ai/skymind/skil/model/Prediction'), require('../ai/skymind/skil/model/Token'), require('../ai/skymind/skil/model/UpdateState'));
  } else {
    // Browser globals (root is window)
    if (!root.SkilClient) {
      root.SkilClient = {};
    }
    root.SkilClient.DefaultApi = factory(root.SkilClient.ApiClient, root.SkilClient.Base64NDArrayBody, root.SkilClient.ClassificationResult, root.SkilClient.Credentials, root.SkilClient.DeployModel, root.SkilClient.Deployment, root.SkilClient.FileUploadList, root.SkilClient.JsonArrayResponse, root.SkilClient.LogBatch, root.SkilClient.LogRequest, root.SkilClient.MultiClassClassificationResult, root.SkilClient.NewDeployment, root.SkilClient.Prediction, root.SkilClient.Token, root.SkilClient.UpdateState);
  }
}(this, function(ApiClient, Base64NDArrayBody, ClassificationResult, Credentials, DeployModel, Deployment, FileUploadList, JsonArrayResponse, LogBatch, LogRequest, MultiClassClassificationResult, NewDeployment, Prediction, Token, UpdateState) {
  'use strict';

  /**
   * Default service.
   * @module ai/skymind/skil/DefaultApi
   * @version 1.1.0-beta
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:ai/skymind/skil/DefaultApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the classify operation.
     * @callback module:ai/skymind/skil/DefaultApi~classifyCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ClassificationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use the deployed model to classify the input
     * @param {module:ai/skymind/skil/model/Prediction} body The input NDArray
     * @param {String} deploymentName The unique slug of the deployment
     * @param {String} modelName The unique slug of the model
     * @param {String} version A string representing the model version
     * @param {module:ai/skymind/skil/DefaultApi~classifyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ClassificationResult}
     */
    this.classify = function(body, deploymentName, modelName, version, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling classify");
      }

      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling classify");
      }

      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling classify");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling classify");
      }


      var pathParams = {
        'deploymentName': deploymentName,
        'modelName': modelName,
        'version': version
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ClassificationResult;

      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/models/{modelName}/{version}/classify', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the classifyarray operation.
     * @callback module:ai/skymind/skil/DefaultApi~classifyarrayCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/Base64NDArrayBody} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Same as /classify but returns the output as Base64NDArrayBody
     * @param {module:ai/skymind/skil/model/Prediction} body The input NDArray
     * @param {String} deploymentName The unique slug of the deployment
     * @param {String} modelName The unique slug of the model
     * @param {String} version A string representing the model version
     * @param {module:ai/skymind/skil/DefaultApi~classifyarrayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/Base64NDArrayBody}
     */
    this.classifyarray = function(body, deploymentName, modelName, version, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling classifyarray");
      }

      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling classifyarray");
      }

      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling classifyarray");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling classifyarray");
      }


      var pathParams = {
        'deploymentName': deploymentName,
        'modelName': modelName,
        'version': version
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Base64NDArrayBody;

      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/models/{modelName}/{version}/classifyarray', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the classifyimage operation.
     * @callback module:ai/skymind/skil/DefaultApi~classifyimageCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/ClassificationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use the deployed model to classify the input, using input image file from multipart form data.
     * @param {String} deploymentName The unique slug of the deployment
     * @param {String} modelName The unique slug of the model
     * @param {String} version A string representing the model version
     * @param {Object} opts Optional parameters
     * @param {File} opts.image The file to upload.
     * @param {module:ai/skymind/skil/DefaultApi~classifyimageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/ClassificationResult}
     */
    this.classifyimage = function(deploymentName, modelName, version, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling classifyimage");
      }

      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling classifyimage");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling classifyimage");
      }


      var pathParams = {
        'deploymentName': deploymentName,
        'modelName': modelName,
        'version': version
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'image': opts['image']
      };

      var authNames = ['api_key'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = ClassificationResult;

      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/models/{modelName}/{version}/classifyimage', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deployModel operation.
     * @callback module:ai/skymind/skil/DefaultApi~deployModelCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deploy a model in a deployment group.
     * @param {String} deploymentId ID deployment group
     * @param {module:ai/skymind/skil/model/DeployModel} body the deployment request
     * @param {module:ai/skymind/skil/DefaultApi~deployModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.deployModel = function(deploymentId, body, callback) {
      var postBody = body;

      // verify the required parameter 'deploymentId' is set
      if (deploymentId === undefined || deploymentId === null) {
        throw new Error("Missing the required parameter 'deploymentId' when calling deployModel");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deployModel");
      }


      var pathParams = {
        'deploymentId': deploymentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/deployment/{deploymentId}/model', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deploymentCreate operation.
     * @callback module:ai/skymind/skil/DefaultApi~deploymentCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/Deployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new deployment group.
     * @param {module:ai/skymind/skil/model/NewDeployment} body the deployment request
     * @param {module:ai/skymind/skil/DefaultApi~deploymentCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/Deployment}
     */
    this.deploymentCreate = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deploymentCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Deployment;

      return this.apiClient.callApi(
        '/deployment', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the jsonarray operation.
     * @callback module:ai/skymind/skil/DefaultApi~jsonarrayCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/JsonArrayResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run inference on the input and returns it as a JsonArrayResponse
     * @param {module:ai/skymind/skil/model/Prediction} body The input NDArray
     * @param {String} deploymentName The unique slug of the deployment
     * @param {String} modelName The unique slug of the model
     * @param {String} version A string representing the model version
     * @param {module:ai/skymind/skil/DefaultApi~jsonarrayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/JsonArrayResponse}
     */
    this.jsonarray = function(body, deploymentName, modelName, version, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling jsonarray");
      }

      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling jsonarray");
      }

      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling jsonarray");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling jsonarray");
      }


      var pathParams = {
        'deploymentName': deploymentName,
        'modelName': modelName,
        'version': version
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = JsonArrayResponse;

      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/models/{modelName}/{version}/jsonarray', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logfilepath operation.
     * @callback module:ai/skymind/skil/DefaultApi~logfilepathCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get logs file path
     * @param {String} deploymentName Name of the deployment group
     * @param {String} modelName ID or name of the deployed model
     * @param {module:ai/skymind/skil/DefaultApi~logfilepathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.logfilepath = function(deploymentName, modelName, callback) {
      var postBody = null;

      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling logfilepath");
      }

      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling logfilepath");
      }


      var pathParams = {
        'deploymentName': deploymentName,
        'modelName': modelName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['text'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/model/{modelName}/logfilepath', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the login operation.
     * @callback module:ai/skymind/skil/DefaultApi~loginCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/Token} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Post JSON credentials and obtain a JWT authorization token.
     * @param {module:ai/skymind/skil/model/Credentials} credentials Login credentials.
     * @param {module:ai/skymind/skil/DefaultApi~loginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/Token}
     */
    this.login = function(credentials, callback) {
      var postBody = credentials;

      // verify the required parameter 'credentials' is set
      if (credentials === undefined || credentials === null) {
        throw new Error("Missing the required parameter 'credentials' when calling login");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Token;

      return this.apiClient.callApi(
        '/login', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logs operation.
     * @callback module:ai/skymind/skil/DefaultApi~logsCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/LogBatch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get logs
     * @param {module:ai/skymind/skil/model/LogRequest} body the the log request
     * @param {String} deploymentName Name of the deployment group
     * @param {String} modelName ID or name of the deployed model
     * @param {module:ai/skymind/skil/DefaultApi~logsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/LogBatch}
     */
    this.logs = function(body, deploymentName, modelName, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling logs");
      }

      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling logs");
      }

      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling logs");
      }


      var pathParams = {
        'deploymentName': deploymentName,
        'modelName': modelName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LogBatch;

      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/model/{modelName}/logs', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the multiclassify operation.
     * @callback module:ai/skymind/skil/DefaultApi~multiclassifyCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/MultiClassClassificationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Represents all of the labels for a given classification
     * @param {module:ai/skymind/skil/model/Prediction} body The input NDArray
     * @param {String} deploymentName The unique slug of the deployment
     * @param {String} modelName The unique slug of the model
     * @param {String} version A string representing the model version
     * @param {module:ai/skymind/skil/DefaultApi~multiclassifyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/MultiClassClassificationResult}
     */
    this.multiclassify = function(body, deploymentName, modelName, version, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling multiclassify");
      }

      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling multiclassify");
      }

      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling multiclassify");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling multiclassify");
      }


      var pathParams = {
        'deploymentName': deploymentName,
        'modelName': modelName,
        'version': version
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MultiClassClassificationResult;

      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/models/{modelName}/{version}/multiclassify', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the predict operation.
     * @callback module:ai/skymind/skil/DefaultApi~predictCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/Prediction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run inference on the input array.
     * @param {module:ai/skymind/skil/model/Prediction} body The input NDArray
     * @param {String} deploymentName The unique slug of the deployment
     * @param {String} modelName The unique slug of the model
     * @param {String} version A string representing the model version
     * @param {module:ai/skymind/skil/DefaultApi~predictCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/Prediction}
     */
    this.predict = function(body, deploymentName, modelName, version, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling predict");
      }

      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling predict");
      }

      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling predict");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling predict");
      }


      var pathParams = {
        'deploymentName': deploymentName,
        'modelName': modelName,
        'version': version
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Prediction;

      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/models/{modelName}/{version}/predict', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the predictimage operation.
     * @callback module:ai/skymind/skil/DefaultApi~predictimageCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/Prediction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run inference on the input array, using input image file from multipart form data.
     * @param {String} deploymentName The unique slug of the deployment
     * @param {String} modelName The unique slug of the model
     * @param {String} version A string representing the model version
     * @param {Object} opts Optional parameters
     * @param {File} opts.image The file to upload.
     * @param {module:ai/skymind/skil/DefaultApi~predictimageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/Prediction}
     */
    this.predictimage = function(deploymentName, modelName, version, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling predictimage");
      }

      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling predictimage");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling predictimage");
      }


      var pathParams = {
        'deploymentName': deploymentName,
        'modelName': modelName,
        'version': version
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'image': opts['image']
      };

      var authNames = ['api_key'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = Prediction;

      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/models/{modelName}/{version}/predictimage', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the predictwithpreprocess operation.
     * @callback module:ai/skymind/skil/DefaultApi~predictwithpreprocessCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/Prediction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Preprocesses the input and run inference on it
     * @param {Array.<module:ai/skymind/skil/model/String>} body The input array
     * @param {String} deploymentName The unique slug of the deployment
     * @param {String} modelName The unique slug of the model
     * @param {String} version A string representing the model version
     * @param {module:ai/skymind/skil/DefaultApi~predictwithpreprocessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/Prediction}
     */
    this.predictwithpreprocess = function(body, deploymentName, modelName, version, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling predictwithpreprocess");
      }

      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling predictwithpreprocess");
      }

      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling predictwithpreprocess");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling predictwithpreprocess");
      }


      var pathParams = {
        'deploymentName': deploymentName,
        'modelName': modelName,
        'version': version
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Prediction;

      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/models/{modelName}/{version}/predictwithpreprocess', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the predictwithpreprocessjson operation.
     * @callback module:ai/skymind/skil/DefaultApi~predictwithpreprocessjsonCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/JsonArrayResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Preprocesses the input and run inference on it and returns it as a JsonArrayResponse
     * @param {Array.<module:ai/skymind/skil/model/String>} body The input array
     * @param {String} deploymentName The unique slug of the deployment
     * @param {String} modelName The unique slug of the model
     * @param {String} version A string representing the model version
     * @param {module:ai/skymind/skil/DefaultApi~predictwithpreprocessjsonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/JsonArrayResponse}
     */
    this.predictwithpreprocessjson = function(body, deploymentName, modelName, version, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling predictwithpreprocessjson");
      }

      // verify the required parameter 'deploymentName' is set
      if (deploymentName === undefined || deploymentName === null) {
        throw new Error("Missing the required parameter 'deploymentName' when calling predictwithpreprocessjson");
      }

      // verify the required parameter 'modelName' is set
      if (modelName === undefined || modelName === null) {
        throw new Error("Missing the required parameter 'modelName' when calling predictwithpreprocessjson");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling predictwithpreprocessjson");
      }


      var pathParams = {
        'deploymentName': deploymentName,
        'modelName': modelName,
        'version': version
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = JsonArrayResponse;

      return this.apiClient.callApi(
        '/endpoints/{deploymentName}/models/{modelName}/{version}/predictwithpreprocessjson', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateState operation.
     * @callback module:ai/skymind/skil/DefaultApi~updateStateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change the state of model to \&quot;start\&quot; or \&quot;stop\&quot;
     * @param {String} deploymentId ID deployment group
     * @param {String} modelId ID of model
     * @param {module:ai/skymind/skil/model/UpdateState} body the state request
     * @param {module:ai/skymind/skil/DefaultApi~updateStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.updateState = function(deploymentId, modelId, body, callback) {
      var postBody = body;

      // verify the required parameter 'deploymentId' is set
      if (deploymentId === undefined || deploymentId === null) {
        throw new Error("Missing the required parameter 'deploymentId' when calling updateState");
      }

      // verify the required parameter 'modelId' is set
      if (modelId === undefined || modelId === null) {
        throw new Error("Missing the required parameter 'modelId' when calling updateState");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateState");
      }


      var pathParams = {
        'deploymentId': deploymentId,
        'modelId': modelId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/deployment/{deploymentId}/model/{modelId}/state', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the upload operation.
     * @callback module:ai/skymind/skil/DefaultApi~uploadCallback
     * @param {String} error Error message, if any.
     * @param {module:ai/skymind/skil/model/FileUploadList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a model file to SKIL for import.
     * @param {Object} opts Optional parameters
     * @param {File} opts.file The file to upload.
     * @param {module:ai/skymind/skil/DefaultApi~uploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:ai/skymind/skil/model/FileUploadList}
     */
    this.upload = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'file': opts['file']
      };

      var authNames = ['api_key'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = FileUploadList;

      return this.apiClient.callApi(
        '/api/upload/model', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
