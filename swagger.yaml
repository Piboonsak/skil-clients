---
swagger: "2.0"
info:
  description: Endpoints API for classification and other prediction services in SKIL
  version: 1.1.0-beta
  title: Predict
host: localhost:9008
schemes:
- https
securityDefinitions:
  api_key:
    type: apiKey
    name: authorization
    in: header
    description: |
     For accessing the API a valid JWT token must be passed in all the queries in
     the 'Authorization' header.
  
  
     A valid JWT token is generated by the API and retourned as answer of a call
     to the route /login giving a valid user & password.
  
  
     The following syntax must be used in the 'Authorization' header :
  
         Bearer xxxxxx.yyyyyyy.zzzzzz
security:
  - api_key: []
paths:
  /login:
    post:
      operationId: login
      summary: Post JSON credentials and obtain a JWT authorization token.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: credentials
        in: body
        description: Login credentials.
        required: true
        schema:
          $ref: '#/definitions/Credentials'
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Token'
        401:
          description: Invalid credentials
  /api/upload/model:
    post:
      operationId: upload
      summary: Upload a model file to SKIL for import.
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: file
        in: formData
        type: file
        description: The file to upload.
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/FileUploadList'
  /endpoints/{deploymentName}/models/{modelName}/{version}/predict:
    post:
      operationId: predict
      summary: Run inference on the input array.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: body
        in: body
        description: The input NDArray
        required: true
        schema:
          $ref: '#/definitions/Prediction'
      - name: deploymentName
        in: path
        description: The unique slug of the deployment
        required: true
        type: string
      - name: modelName
        in: path
        description: The unique slug of the model
        required: true
        type: string
      - name: version
        in: path
        description: A string representing the model version
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Prediction'
        400:
          description: Invalid input
        500:
          description: Invalid deployment or model name
  /endpoints/{deploymentName}/models/{modelName}/{version}/predictimage:
    post:
      operationId: predictimage
      summary: Run inference on the input array, using input image file from multipart form data.
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: image
        in: formData
        type: file
        description: The file to upload.
      - name: deploymentName
        in: path
        description: The unique slug of the deployment
        required: true
        type: string
      - name: modelName
        in: path
        description: The unique slug of the model
        required: true
        type: string
      - name: version
        in: path
        description: A string representing the model version
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Prediction'
        500:
          description: Error generating prediction
  /endpoints/{deploymentName}/models/{modelName}/{version}/classify:
    post:
      operationId: classify
      summary: Use the deployed model to classify the input
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: The input NDArray
        required: true
        schema:
          $ref: '#/definitions/Prediction'
      - name: deploymentName
        in: path
        description: The unique slug of the deployment
        required: true
        type: string
      - name: modelName
        in: path
        description: The unique slug of the model
        required: true
        type: string
      - name: version
        in: path
        description: A string representing the model version
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/ClassificationResult'
        400:
          description: Invalid input
        500:
          description: Invalid deployment or model name
  /endpoints/{deploymentName}/models/{modelName}/{version}/classifyimage:
    post:
      operationId: classifyimage
      summary: Use the deployed model to classify the input, using input image file from multipart form data.
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: image
        in: formData
        type: file
        description: The file to upload.
      - name: deploymentName
        in: path
        description: The unique slug of the deployment
        required: true
        type: string
      - name: modelName
        in: path
        description: The unique slug of the model
        required: true
        type: string
      - name: version
        in: path
        description: A string representing the model version
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/ClassificationResult'
        500:
          description: Error generating classification
  /endpoints/{deploymentName}/models/{modelName}/{version}/classifyarray:
    post:
      operationId: classifyarray
      summary: Same as /classify but returns the output as Base64NDArrayBody
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: The input NDArray
        required: true
        schema:
          $ref: '#/definitions/Prediction'
      - name: deploymentName
        in: path
        description: The unique slug of the deployment
        required: true
        type: string
      - name: modelName
        in: path
        description: The unique slug of the model
        required: true
        type: string
      - name: version
        in: path
        description: A string representing the model version
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Base64NDArrayBody'
        400:
          description: Invalid input
        500:
          description: Invalid deployment or model name
  /endpoints/{deploymentName}/models/{modelName}/{version}/multiclassify:
    post:
      operationId: multiclassify
      summary: Represents all of the labels for a given classification
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: The input NDArray
        required: true
        schema:
          $ref: '#/definitions/Prediction'
      - name: deploymentName
        in: path
        description: The unique slug of the deployment
        required: true
        type: string
      - name: modelName
        in: path
        description: The unique slug of the model
        required: true
        type: string
      - name: version
        in: path
        description: A string representing the model version
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/MultiClassClassificationResult'
        400:
          description: Invalid input
        500:
          description: Invalid deployment or model name
  /endpoints/{deploymentName}/models/{modelName}/{version}/jsonarray:
    post:
      operationId: jsonarray
      summary: Run inference on the input and returns it as a JsonArrayResponse
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: The input NDArray
        required: true
        schema:
          $ref: '#/definitions/Prediction'
      - name: deploymentName
        in: path
        description: The unique slug of the deployment
        required: true
        type: string
      - name: modelName
        in: path
        description: The unique slug of the model
        required: true
        type: string
      - name: version
        in: path
        description: A string representing the model version
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/JsonArrayResponse'
        500:
          description: Error generating array prediction
  /endpoints/{deploymentName}/models/{modelName}/{version}/predictwithpreprocess:
    post:
      operationId: predictwithpreprocess
      summary: Preprocesses the input and run inference on it
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: The input array
        required: true
        schema:
          type: array
          items:
            type: string
      - name: deploymentName
        in: path
        description: The unique slug of the deployment
        required: true
        type: string
      - name: modelName
        in: path
        description: The unique slug of the model
        required: true
        type: string
      - name: version
        in: path
        description: A string representing the model version
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Prediction'
        500:
          description: Error executing predictPreProcess
  /endpoints/{deploymentName}/models/{modelName}/{version}/predictwithpreprocessjson:
    post:
      operationId: predictwithpreprocessjson
      summary: Preprocesses the input and run inference on it and returns it as a JsonArrayResponse
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: The input array
        required: true
        schema:
          type: array
          items:
            type: string
      - name: deploymentName
        in: path
        description: The unique slug of the deployment
        required: true
        type: string
      - name: modelName
        in: path
        description: The unique slug of the model
        required: true
        type: string
      - name: version
        in: path
        description: A string representing the model version
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/JsonArrayResponse'
        500:
          description: Error executing predictPreProcessJson
  /endpoints/{deploymentName}/model/{modelName}/logs:
    post:
      operationId: logs
      summary: Get logs
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: the the log request
        required: true
        schema:
          $ref: '#/definitions/LogRequest'
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: modelName
        in: path
        description: ID or name of the deployed model
        required: true
        type: string
      responses:
        200:
          description: logs obtained successfully
          schema:
            $ref: '#/definitions/LogBatch'
        500:
          description: Error retrieving logs
  /endpoints/{deploymentName}/model/{modelName}/logfilepath:
    get:
      operationId: logfilepath
      summary: Get logs file path
      produces:
      - text
      parameters:
      - name: deploymentName
        in: path
        description: Name of the deployment group
        required: true
        type: string
      - name: modelName
        in: path
        description: ID or name of the deployed model
        required: true
        type: string
      responses:
        200:
          description: the retrieved log file path
          schema:
            type: string
            example: log_file_path
        500:
          description: Error retrieving log file path
  /deployment:
    post:
      operationId: deploymentCreate
      summary: Create a new deployment group.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: the deployment request
        required: true
        schema:
          $ref: '#/definitions/NewDeployment'
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Deployment'
        500:
          description: Error creating deployment
  /deployment/{deploymentId}/model:
    post:
      operationId: deployModel
      summary: Deploy a model in a deployment group.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: deploymentId
        in: path
        description: ID deployment group
        required: true
        type: string
      - in: body
        name: body
        description: the deployment request
        required: true
        schema:
          $ref: '#/definitions/DeployModel'
      responses:
        200:
          description: successful operation
          schema:
            type: object
        500:
          description: Error creating deployment
  /deployment/{deploymentId}/model/{modelId}/state:
    post:
      operationId: updateState
      summary: Change the state of model to "start" or "stop"
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: deploymentId
        in: path
        description: ID deployment group
        required: true
        type: string
      - name: modelId
        in: path
        description: ID of model
        required: true
        type: string
      - in: body
        name: body
        description: the state request
        required: true
        schema:
          $ref: '#/definitions/UpdateState'
      responses:
        200:
          description: successful operation
          schema:
            type: object
        500:
          description: Error creating deployment      
definitions:
  DeployModel:
    type: object
    properties:
      name:
        type: string
      scale:
        type: integer
      uri:
        type: array
        items:
          type: string
      modelType:
        type: string
      fileLocation:
        type: string
      jvmArgs:
        type: string
      subType:
        type: string
      labelsFileLocation:
        type: string
      extraArgs:
        type: string
      etlJson:
        type: string
      inputNames:
        type: array
        items:
          type: string
      outputNames:
        type: array
        items:
          type: string
    example:
      name: new_model
      scale: 1
      uri: 'my_deployment/model/my_model/v1'
      modelType: model
      fileLocation: 'file:///var/skil/storage/models/d8...eb28.zip'
  Deployment:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      deploymentSlug:
        type: string
      status:
        type: string
      body:
        $ref: '#/definitions/DeploymentObjects'
  DeploymentObjects:
    type: object
    properties:
      models:
        type: array
        items:
          type: object
      transforms:
        type: array
        items:
          type: object
      knn:
        type: array
        items:
          type: object
  NewDeployment:
    type: object
    properties:
      name:
        type: string
    example:
      name: productiongroup
  UpdateState:
    type: object
    properties:
      state:
        type: string
    example:
      state: start
  Credentials:
    type: object
    properties:
      userId:
        type: string
      password:
        type: string
    example:
      userId: admin
      password: admin
  Token:
    type: object
    properties:
      token:
        type: string
    example:
      token: xxxxxxx.yyyyyyy.zzzzzz
  FileUploadList:
    type: object
    properties:
      fileUploadResponseList:
        type: array
        items:
          $ref: '#/definitions/FileUpload'
  FileUpload:
    type: object
    properties:
      key:
        type: string
      fileName:
        type: string
      status:
        type: string
      type:
        type: string
      path:
        type: string
      fileContent:
        type: string
  INDArray:
    type: object
    properties:
      array:
        type: string
        format: base64
    example:
      array: array
  Prediction:
    type: object
    properties:
      id:
        type: string
        format: guid
      needsPreProcessing:
        type: boolean
      prediction:
        $ref: '#/definitions/INDArray'
    example:
      needsPreProcessing: true
      prediction:
        array: array
      id: id
  ClassificationResult:
    properties:
      results:
        type: array
        description: index classification results for the minibatch
        items:
          type: integer
      probabilities:
        type: array
        description: max probabilities for the batch items
        items:
          type: number
          example: 0.452
      minibatchId:
        type: string
        description: minibatch ID
    example:
      minibatchId: minibatchId
      results:
      - 0
      - 0
      probabilities:
      - 0.452
      - 0.452
  Base64NDArrayBody:
    properties:
      ndarray:
        type: string
    example:
      ndarray: ndarray
  MultiClassClassificationResult:
    properties:
      rankedOutcomes:
        type: array
        items:
          type: array
          items:
            type: string
      maxOutcomes:
        type: array
        items:
          type: string
      probabilities:
        type: array
        items:
          type: array
          items:
            type: number
            example: 0.4
    description: Represents all of the labels for a given classification
    example:
      maxOutcomes:
      - maxOutcomes
      - maxOutcomes
      rankedOutcomes:
      - - rankedOutcomes
        - rankedOutcomes
      - - rankedOutcomes
        - rankedOutcomes
      probabilities:
      - - 0.4
        - 0.4
      - - 0.4
        - 0.4
  ModelStatus:
    properties:
      status:
        type: integer
        example: 100
        description: "100 - Model set successfully \n200 - Model Updated Successfully\
          \ \n201 - Model Update Failed\n"
    example:
      status: 100
  JsonArrayResponse:
    properties:
      array:
        $ref: '#/definitions/INDArray'
    example:
      array:
        array: array
  LogRequest:
    properties:
      offset:
        type: integer
        example: 0
      rowCount:
        type: integer
        example: 2
      head:
        type: boolean
        example: false
    example:
      head: false
      offset: 0
      rowCount: 2
  LogBatch:
    properties:
      offset:
        type: integer
        example: 0
      rowCount:
        type: integer
        example: 2
      logs:
        type: string
    example:
      offset: 0
      rowCount: 2
      logs: logs
