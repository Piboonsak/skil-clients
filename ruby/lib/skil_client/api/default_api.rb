=begin
#Predict

#Endpoints API for classification and other prediction services in SKIL

OpenAPI spec version: 1.0.3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module SkilCient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Use the deployed model to classify the input
    # 
    # @param body The input NDArray
    # @param deployment_name Name of the deployment group
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [ClassificationResult]
    def classify(body, deployment_name, model_name, opts = {})
      data, _status_code, _headers = classify_with_http_info(body, deployment_name, model_name, opts)
      return data
    end

    # Use the deployed model to classify the input
    # 
    # @param body The input NDArray
    # @param deployment_name Name of the deployment group
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClassificationResult, Fixnum, Hash)>] ClassificationResult data, response status code and response headers
    def classify_with_http_info(body, deployment_name, model_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.classify ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.classify"
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.classify"
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.classify"
      end
      # resource path
      local_var_path = "/{deploymentName}/model/{modelName}/default/classify".sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'modelName' + '}', model_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClassificationResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#classify\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Same as /classify but returns the output as Base64NDArrayBody
    # 
    # @param body The input NDArray
    # @param deployment_name Name of the deployment group
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [Base64NDArrayBody]
    def classifyarray(body, deployment_name, model_name, opts = {})
      data, _status_code, _headers = classifyarray_with_http_info(body, deployment_name, model_name, opts)
      return data
    end

    # Same as /classify but returns the output as Base64NDArrayBody
    # 
    # @param body The input NDArray
    # @param deployment_name Name of the deployment group
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [Array<(Base64NDArrayBody, Fixnum, Hash)>] Base64NDArrayBody data, response status code and response headers
    def classifyarray_with_http_info(body, deployment_name, model_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.classifyarray ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.classifyarray"
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.classifyarray"
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.classifyarray"
      end
      # resource path
      local_var_path = "/{deploymentName}/model/{modelName}/default/classifyarray".sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'modelName' + '}', model_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Base64NDArrayBody')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#classifyarray\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Use the deployed model to classify the input, using input image file from multipart form data.
    # 
    # @param deployment_name Name of the deployment group
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @option opts [File] :image The file to upload.
    # @return [ClassificationResult]
    def classifyimage(deployment_name, model_name, opts = {})
      data, _status_code, _headers = classifyimage_with_http_info(deployment_name, model_name, opts)
      return data
    end

    # Use the deployed model to classify the input, using input image file from multipart form data.
    # 
    # @param deployment_name Name of the deployment group
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @option opts [File] :image The file to upload.
    # @return [Array<(ClassificationResult, Fixnum, Hash)>] ClassificationResult data, response status code and response headers
    def classifyimage_with_http_info(deployment_name, model_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.classifyimage ..."
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.classifyimage"
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.classifyimage"
      end
      # resource path
      local_var_path = "/{deploymentName}/model/{modelName}/default/classifyimage".sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'modelName' + '}', model_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params["image"] = opts[:'image'] if !opts[:'image'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClassificationResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#classifyimage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Run inference on the input and returns it as a JsonArrayResponse
    # 
    # @param body The input NDArray
    # @param deployment_name Name of the deployment group
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [JsonArrayResponse]
    def jsonarray(body, deployment_name, model_name, opts = {})
      data, _status_code, _headers = jsonarray_with_http_info(body, deployment_name, model_name, opts)
      return data
    end

    # Run inference on the input and returns it as a JsonArrayResponse
    # 
    # @param body The input NDArray
    # @param deployment_name Name of the deployment group
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [Array<(JsonArrayResponse, Fixnum, Hash)>] JsonArrayResponse data, response status code and response headers
    def jsonarray_with_http_info(body, deployment_name, model_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.jsonarray ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.jsonarray"
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.jsonarray"
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.jsonarray"
      end
      # resource path
      local_var_path = "/{deploymentName}/model/{modelName}/default/jsonarray".sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'modelName' + '}', model_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'JsonArrayResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#jsonarray\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get logs file path
    # 
    # @param deployment_name Name of the deployment group
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [String]
    def logfilepath(deployment_name, model_name, opts = {})
      data, _status_code, _headers = logfilepath_with_http_info(deployment_name, model_name, opts)
      return data
    end

    # Get logs file path
    # 
    # @param deployment_name Name of the deployment group
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def logfilepath_with_http_info(deployment_name, model_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.logfilepath ..."
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.logfilepath"
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.logfilepath"
      end
      # resource path
      local_var_path = "/{deploymentName}/model/{modelName}/default/logfilepath".sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'modelName' + '}', model_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#logfilepath\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get logs
    # 
    # @param body the the log request
    # @param deployment_name Name of the deployment group
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [LogBatch]
    def logs(body, deployment_name, model_name, opts = {})
      data, _status_code, _headers = logs_with_http_info(body, deployment_name, model_name, opts)
      return data
    end

    # Get logs
    # 
    # @param body the the log request
    # @param deployment_name Name of the deployment group
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [Array<(LogBatch, Fixnum, Hash)>] LogBatch data, response status code and response headers
    def logs_with_http_info(body, deployment_name, model_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.logs ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.logs"
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.logs"
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.logs"
      end
      # resource path
      local_var_path = "/{deploymentName}/model/{modelName}/default/logs".sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'modelName' + '}', model_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogBatch')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#logs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set the model to be served
    # 
    # @param deployment_name Name of the deployment group
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @option opts [File] :file The model file to upload (.pb file)
    # @return [ModelStatus]
    def modelset(deployment_name, model_name, opts = {})
      data, _status_code, _headers = modelset_with_http_info(deployment_name, model_name, opts)
      return data
    end

    # Set the model to be served
    # 
    # @param deployment_name Name of the deployment group
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @option opts [File] :file The model file to upload (.pb file)
    # @return [Array<(ModelStatus, Fixnum, Hash)>] ModelStatus data, response status code and response headers
    def modelset_with_http_info(deployment_name, model_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.modelset ..."
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.modelset"
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.modelset"
      end
      # resource path
      local_var_path = "/{deploymentName}/model/{modelName}/default/modelset".sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'modelName' + '}', model_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params["file"] = opts[:'file'] if !opts[:'file'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#modelset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the model to be served
    # 
    # @param deployment_name Name of the deployment group
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @option opts [File] :file The model file to update with (.pb file)
    # @return [ModelStatus]
    def modelupdate(deployment_name, model_name, opts = {})
      data, _status_code, _headers = modelupdate_with_http_info(deployment_name, model_name, opts)
      return data
    end

    # Update the model to be served
    # 
    # @param deployment_name Name of the deployment group
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @option opts [File] :file The model file to update with (.pb file)
    # @return [Array<(ModelStatus, Fixnum, Hash)>] ModelStatus data, response status code and response headers
    def modelupdate_with_http_info(deployment_name, model_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.modelupdate ..."
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.modelupdate"
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.modelupdate"
      end
      # resource path
      local_var_path = "/{deploymentName}/model/{modelName}/default/modelupdate".sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'modelName' + '}', model_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params["file"] = opts[:'file'] if !opts[:'file'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ModelStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#modelupdate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Represents all of the labels for a given classification
    # 
    # @param body The input NDArray
    # @param deployment_name Name of the deployment group
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [MultiClassClassificationResult]
    def multiclassify(body, deployment_name, model_name, opts = {})
      data, _status_code, _headers = multiclassify_with_http_info(body, deployment_name, model_name, opts)
      return data
    end

    # Represents all of the labels for a given classification
    # 
    # @param body The input NDArray
    # @param deployment_name Name of the deployment group
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultiClassClassificationResult, Fixnum, Hash)>] MultiClassClassificationResult data, response status code and response headers
    def multiclassify_with_http_info(body, deployment_name, model_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.multiclassify ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.multiclassify"
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.multiclassify"
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.multiclassify"
      end
      # resource path
      local_var_path = "/{deploymentName}/model/{modelName}/default/multiclassify".sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'modelName' + '}', model_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MultiClassClassificationResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#multiclassify\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Run inference on the input array.
    # 
    # @param body The input NDArray
    # @param deployment_name Name of the deployment group
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [Prediction]
    def predict(body, deployment_name, model_name, opts = {})
      data, _status_code, _headers = predict_with_http_info(body, deployment_name, model_name, opts)
      return data
    end

    # Run inference on the input array.
    # 
    # @param body The input NDArray
    # @param deployment_name Name of the deployment group
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [Array<(Prediction, Fixnum, Hash)>] Prediction data, response status code and response headers
    def predict_with_http_info(body, deployment_name, model_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.predict ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.predict"
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.predict"
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.predict"
      end
      # resource path
      local_var_path = "/{deploymentName}/model/{modelName}/default/predict".sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'modelName' + '}', model_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Prediction')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#predict\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Run inference on the input array, using input image file from multipart form data.
    # 
    # @param deployment_name Name of the deployment group
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @option opts [File] :image The file to upload.
    # @return [Prediction]
    def predict_0(deployment_name, model_name, opts = {})
      data, _status_code, _headers = predict_0_with_http_info(deployment_name, model_name, opts)
      return data
    end

    # Run inference on the input array, using input image file from multipart form data.
    # 
    # @param deployment_name Name of the deployment group
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @option opts [File] :image The file to upload.
    # @return [Array<(Prediction, Fixnum, Hash)>] Prediction data, response status code and response headers
    def predict_0_with_http_info(deployment_name, model_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.predict_0 ..."
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.predict_0"
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.predict_0"
      end
      # resource path
      local_var_path = "/{deploymentName}/model/{modelName}/default/predictimage".sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'modelName' + '}', model_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params["image"] = opts[:'image'] if !opts[:'image'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Prediction')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#predict_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Preprocesses the input and run inference on it
    # 
    # @param body The input array
    # @param deployment_name Name of the deployment group
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [Prediction]
    def predictwithpreprocess(body, deployment_name, model_name, opts = {})
      data, _status_code, _headers = predictwithpreprocess_with_http_info(body, deployment_name, model_name, opts)
      return data
    end

    # Preprocesses the input and run inference on it
    # 
    # @param body The input array
    # @param deployment_name Name of the deployment group
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [Array<(Prediction, Fixnum, Hash)>] Prediction data, response status code and response headers
    def predictwithpreprocess_with_http_info(body, deployment_name, model_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.predictwithpreprocess ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.predictwithpreprocess"
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.predictwithpreprocess"
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.predictwithpreprocess"
      end
      # resource path
      local_var_path = "/{deploymentName}/model/{modelName}/default/predictwithpreprocess".sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'modelName' + '}', model_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Prediction')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#predictwithpreprocess\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Preprocesses the input and run inference on it and returns it as a JsonArrayResponse
    # 
    # @param body The input array
    # @param deployment_name Name of the deployment group
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [JsonArrayResponse]
    def predictwithpreprocessjson(body, deployment_name, model_name, opts = {})
      data, _status_code, _headers = predictwithpreprocessjson_with_http_info(body, deployment_name, model_name, opts)
      return data
    end

    # Preprocesses the input and run inference on it and returns it as a JsonArrayResponse
    # 
    # @param body The input array
    # @param deployment_name Name of the deployment group
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [Array<(JsonArrayResponse, Fixnum, Hash)>] JsonArrayResponse data, response status code and response headers
    def predictwithpreprocessjson_with_http_info(body, deployment_name, model_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.predictwithpreprocessjson ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.predictwithpreprocessjson"
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.predictwithpreprocessjson"
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.predictwithpreprocessjson"
      end
      # resource path
      local_var_path = "/{deploymentName}/model/{modelName}/default/predictwithpreprocessjson".sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'modelName' + '}', model_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'JsonArrayResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#predictwithpreprocessjson\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
