=begin
#Predict

#Endpoints API for classification and other prediction services in SKIL

OpenAPI spec version: 1.1.0-beta

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module SkilCient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Use the deployed model to classify the input
    # 
    # @param body The input NDArray
    # @param deployment_name The unique slug of the deployment
    # @param model_name The unique slug of the model
    # @param version A string representing the model version
    # @param [Hash] opts the optional parameters
    # @return [ClassificationResult]
    def classify(body, deployment_name, model_name, version, opts = {})
      data, _status_code, _headers = classify_with_http_info(body, deployment_name, model_name, version, opts)
      return data
    end

    # Use the deployed model to classify the input
    # 
    # @param body The input NDArray
    # @param deployment_name The unique slug of the deployment
    # @param model_name The unique slug of the model
    # @param version A string representing the model version
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClassificationResult, Fixnum, Hash)>] ClassificationResult data, response status code and response headers
    def classify_with_http_info(body, deployment_name, model_name, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.classify ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.classify"
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.classify"
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.classify"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.classify"
      end
      # resource path
      local_var_path = "/endpoints/{deploymentName}/models/{modelName}/{version}/classify".sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'modelName' + '}', model_name.to_s).sub('{' + 'version' + '}', version.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClassificationResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#classify\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Same as /classify but returns the output as Base64NDArrayBody
    # 
    # @param body The input NDArray
    # @param deployment_name The unique slug of the deployment
    # @param model_name The unique slug of the model
    # @param version A string representing the model version
    # @param [Hash] opts the optional parameters
    # @return [Base64NDArrayBody]
    def classifyarray(body, deployment_name, model_name, version, opts = {})
      data, _status_code, _headers = classifyarray_with_http_info(body, deployment_name, model_name, version, opts)
      return data
    end

    # Same as /classify but returns the output as Base64NDArrayBody
    # 
    # @param body The input NDArray
    # @param deployment_name The unique slug of the deployment
    # @param model_name The unique slug of the model
    # @param version A string representing the model version
    # @param [Hash] opts the optional parameters
    # @return [Array<(Base64NDArrayBody, Fixnum, Hash)>] Base64NDArrayBody data, response status code and response headers
    def classifyarray_with_http_info(body, deployment_name, model_name, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.classifyarray ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.classifyarray"
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.classifyarray"
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.classifyarray"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.classifyarray"
      end
      # resource path
      local_var_path = "/endpoints/{deploymentName}/models/{modelName}/{version}/classifyarray".sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'modelName' + '}', model_name.to_s).sub('{' + 'version' + '}', version.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Base64NDArrayBody')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#classifyarray\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Use the deployed model to classify the input, using input image file from multipart form data.
    # 
    # @param deployment_name The unique slug of the deployment
    # @param model_name The unique slug of the model
    # @param version A string representing the model version
    # @param [Hash] opts the optional parameters
    # @option opts [File] :image The file to upload.
    # @return [ClassificationResult]
    def classifyimage(deployment_name, model_name, version, opts = {})
      data, _status_code, _headers = classifyimage_with_http_info(deployment_name, model_name, version, opts)
      return data
    end

    # Use the deployed model to classify the input, using input image file from multipart form data.
    # 
    # @param deployment_name The unique slug of the deployment
    # @param model_name The unique slug of the model
    # @param version A string representing the model version
    # @param [Hash] opts the optional parameters
    # @option opts [File] :image The file to upload.
    # @return [Array<(ClassificationResult, Fixnum, Hash)>] ClassificationResult data, response status code and response headers
    def classifyimage_with_http_info(deployment_name, model_name, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.classifyimage ..."
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.classifyimage"
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.classifyimage"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.classifyimage"
      end
      # resource path
      local_var_path = "/endpoints/{deploymentName}/models/{modelName}/{version}/classifyimage".sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'modelName' + '}', model_name.to_s).sub('{' + 'version' + '}', version.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params["image"] = opts[:'image'] if !opts[:'image'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClassificationResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#classifyimage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deploy a model in a deployment group.
    # 
    # @param deployment_id ID deployment group
    # @param body the deployment request
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def deploy_model(deployment_id, body, opts = {})
      data, _status_code, _headers = deploy_model_with_http_info(deployment_id, body, opts)
      return data
    end

    # Deploy a model in a deployment group.
    # 
    # @param deployment_id ID deployment group
    # @param body the deployment request
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def deploy_model_with_http_info(deployment_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.deploy_model ..."
      end
      # verify the required parameter 'deployment_id' is set
      if @api_client.config.client_side_validation && deployment_id.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_id' when calling DefaultApi.deploy_model"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.deploy_model"
      end
      # resource path
      local_var_path = "/deployment/{deploymentId}/model".sub('{' + 'deploymentId' + '}', deployment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#deploy_model\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new deployment group.
    # 
    # @param body the deployment request
    # @param [Hash] opts the optional parameters
    # @return [Deployment]
    def deployment_create(body, opts = {})
      data, _status_code, _headers = deployment_create_with_http_info(body, opts)
      return data
    end

    # Create a new deployment group.
    # 
    # @param body the deployment request
    # @param [Hash] opts the optional parameters
    # @return [Array<(Deployment, Fixnum, Hash)>] Deployment data, response status code and response headers
    def deployment_create_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.deployment_create ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.deployment_create"
      end
      # resource path
      local_var_path = "/deployment"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Deployment')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#deployment_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Run inference on the input and returns it as a JsonArrayResponse
    # 
    # @param body The input NDArray
    # @param deployment_name The unique slug of the deployment
    # @param model_name The unique slug of the model
    # @param version A string representing the model version
    # @param [Hash] opts the optional parameters
    # @return [JsonArrayResponse]
    def jsonarray(body, deployment_name, model_name, version, opts = {})
      data, _status_code, _headers = jsonarray_with_http_info(body, deployment_name, model_name, version, opts)
      return data
    end

    # Run inference on the input and returns it as a JsonArrayResponse
    # 
    # @param body The input NDArray
    # @param deployment_name The unique slug of the deployment
    # @param model_name The unique slug of the model
    # @param version A string representing the model version
    # @param [Hash] opts the optional parameters
    # @return [Array<(JsonArrayResponse, Fixnum, Hash)>] JsonArrayResponse data, response status code and response headers
    def jsonarray_with_http_info(body, deployment_name, model_name, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.jsonarray ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.jsonarray"
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.jsonarray"
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.jsonarray"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.jsonarray"
      end
      # resource path
      local_var_path = "/endpoints/{deploymentName}/models/{modelName}/{version}/jsonarray".sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'modelName' + '}', model_name.to_s).sub('{' + 'version' + '}', version.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'JsonArrayResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#jsonarray\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get logs file path
    # 
    # @param deployment_name Name of the deployment group
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [String]
    def logfilepath(deployment_name, model_name, opts = {})
      data, _status_code, _headers = logfilepath_with_http_info(deployment_name, model_name, opts)
      return data
    end

    # Get logs file path
    # 
    # @param deployment_name Name of the deployment group
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def logfilepath_with_http_info(deployment_name, model_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.logfilepath ..."
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.logfilepath"
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.logfilepath"
      end
      # resource path
      local_var_path = "/endpoints/{deploymentName}/model/{modelName}/logfilepath".sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'modelName' + '}', model_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#logfilepath\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Post JSON credentials and obtain a JWT authorization token.
    # 
    # @param credentials Login credentials.
    # @param [Hash] opts the optional parameters
    # @return [Token]
    def login(credentials, opts = {})
      data, _status_code, _headers = login_with_http_info(credentials, opts)
      return data
    end

    # Post JSON credentials and obtain a JWT authorization token.
    # 
    # @param credentials Login credentials.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Token, Fixnum, Hash)>] Token data, response status code and response headers
    def login_with_http_info(credentials, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.login ..."
      end
      # verify the required parameter 'credentials' is set
      if @api_client.config.client_side_validation && credentials.nil?
        fail ArgumentError, "Missing the required parameter 'credentials' when calling DefaultApi.login"
      end
      # resource path
      local_var_path = "/login"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(credentials)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Token')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#login\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get logs
    # 
    # @param body the the log request
    # @param deployment_name Name of the deployment group
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [LogBatch]
    def logs(body, deployment_name, model_name, opts = {})
      data, _status_code, _headers = logs_with_http_info(body, deployment_name, model_name, opts)
      return data
    end

    # Get logs
    # 
    # @param body the the log request
    # @param deployment_name Name of the deployment group
    # @param model_name ID or name of the deployed model
    # @param [Hash] opts the optional parameters
    # @return [Array<(LogBatch, Fixnum, Hash)>] LogBatch data, response status code and response headers
    def logs_with_http_info(body, deployment_name, model_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.logs ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.logs"
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.logs"
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.logs"
      end
      # resource path
      local_var_path = "/endpoints/{deploymentName}/model/{modelName}/logs".sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'modelName' + '}', model_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LogBatch')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#logs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Represents all of the labels for a given classification
    # 
    # @param body The input NDArray
    # @param deployment_name The unique slug of the deployment
    # @param model_name The unique slug of the model
    # @param version A string representing the model version
    # @param [Hash] opts the optional parameters
    # @return [MultiClassClassificationResult]
    def multiclassify(body, deployment_name, model_name, version, opts = {})
      data, _status_code, _headers = multiclassify_with_http_info(body, deployment_name, model_name, version, opts)
      return data
    end

    # Represents all of the labels for a given classification
    # 
    # @param body The input NDArray
    # @param deployment_name The unique slug of the deployment
    # @param model_name The unique slug of the model
    # @param version A string representing the model version
    # @param [Hash] opts the optional parameters
    # @return [Array<(MultiClassClassificationResult, Fixnum, Hash)>] MultiClassClassificationResult data, response status code and response headers
    def multiclassify_with_http_info(body, deployment_name, model_name, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.multiclassify ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.multiclassify"
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.multiclassify"
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.multiclassify"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.multiclassify"
      end
      # resource path
      local_var_path = "/endpoints/{deploymentName}/models/{modelName}/{version}/multiclassify".sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'modelName' + '}', model_name.to_s).sub('{' + 'version' + '}', version.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MultiClassClassificationResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#multiclassify\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Run inference on the input array.
    # 
    # @param body The input NDArray
    # @param deployment_name The unique slug of the deployment
    # @param model_name The unique slug of the model
    # @param version A string representing the model version
    # @param [Hash] opts the optional parameters
    # @return [Prediction]
    def predict(body, deployment_name, model_name, version, opts = {})
      data, _status_code, _headers = predict_with_http_info(body, deployment_name, model_name, version, opts)
      return data
    end

    # Run inference on the input array.
    # 
    # @param body The input NDArray
    # @param deployment_name The unique slug of the deployment
    # @param model_name The unique slug of the model
    # @param version A string representing the model version
    # @param [Hash] opts the optional parameters
    # @return [Array<(Prediction, Fixnum, Hash)>] Prediction data, response status code and response headers
    def predict_with_http_info(body, deployment_name, model_name, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.predict ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.predict"
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.predict"
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.predict"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.predict"
      end
      # resource path
      local_var_path = "/endpoints/{deploymentName}/models/{modelName}/{version}/predict".sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'modelName' + '}', model_name.to_s).sub('{' + 'version' + '}', version.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Prediction')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#predict\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Run inference on the input array, using input image file from multipart form data.
    # 
    # @param deployment_name The unique slug of the deployment
    # @param model_name The unique slug of the model
    # @param version A string representing the model version
    # @param [Hash] opts the optional parameters
    # @option opts [File] :image The file to upload.
    # @return [Prediction]
    def predictimage(deployment_name, model_name, version, opts = {})
      data, _status_code, _headers = predictimage_with_http_info(deployment_name, model_name, version, opts)
      return data
    end

    # Run inference on the input array, using input image file from multipart form data.
    # 
    # @param deployment_name The unique slug of the deployment
    # @param model_name The unique slug of the model
    # @param version A string representing the model version
    # @param [Hash] opts the optional parameters
    # @option opts [File] :image The file to upload.
    # @return [Array<(Prediction, Fixnum, Hash)>] Prediction data, response status code and response headers
    def predictimage_with_http_info(deployment_name, model_name, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.predictimage ..."
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.predictimage"
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.predictimage"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.predictimage"
      end
      # resource path
      local_var_path = "/endpoints/{deploymentName}/models/{modelName}/{version}/predictimage".sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'modelName' + '}', model_name.to_s).sub('{' + 'version' + '}', version.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params["image"] = opts[:'image'] if !opts[:'image'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Prediction')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#predictimage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Preprocesses the input and run inference on it
    # 
    # @param body The input array
    # @param deployment_name The unique slug of the deployment
    # @param model_name The unique slug of the model
    # @param version A string representing the model version
    # @param [Hash] opts the optional parameters
    # @return [Prediction]
    def predictwithpreprocess(body, deployment_name, model_name, version, opts = {})
      data, _status_code, _headers = predictwithpreprocess_with_http_info(body, deployment_name, model_name, version, opts)
      return data
    end

    # Preprocesses the input and run inference on it
    # 
    # @param body The input array
    # @param deployment_name The unique slug of the deployment
    # @param model_name The unique slug of the model
    # @param version A string representing the model version
    # @param [Hash] opts the optional parameters
    # @return [Array<(Prediction, Fixnum, Hash)>] Prediction data, response status code and response headers
    def predictwithpreprocess_with_http_info(body, deployment_name, model_name, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.predictwithpreprocess ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.predictwithpreprocess"
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.predictwithpreprocess"
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.predictwithpreprocess"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.predictwithpreprocess"
      end
      # resource path
      local_var_path = "/endpoints/{deploymentName}/models/{modelName}/{version}/predictwithpreprocess".sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'modelName' + '}', model_name.to_s).sub('{' + 'version' + '}', version.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Prediction')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#predictwithpreprocess\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Preprocesses the input and run inference on it and returns it as a JsonArrayResponse
    # 
    # @param body The input array
    # @param deployment_name The unique slug of the deployment
    # @param model_name The unique slug of the model
    # @param version A string representing the model version
    # @param [Hash] opts the optional parameters
    # @return [JsonArrayResponse]
    def predictwithpreprocessjson(body, deployment_name, model_name, version, opts = {})
      data, _status_code, _headers = predictwithpreprocessjson_with_http_info(body, deployment_name, model_name, version, opts)
      return data
    end

    # Preprocesses the input and run inference on it and returns it as a JsonArrayResponse
    # 
    # @param body The input array
    # @param deployment_name The unique slug of the deployment
    # @param model_name The unique slug of the model
    # @param version A string representing the model version
    # @param [Hash] opts the optional parameters
    # @return [Array<(JsonArrayResponse, Fixnum, Hash)>] JsonArrayResponse data, response status code and response headers
    def predictwithpreprocessjson_with_http_info(body, deployment_name, model_name, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.predictwithpreprocessjson ..."
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.predictwithpreprocessjson"
      end
      # verify the required parameter 'deployment_name' is set
      if @api_client.config.client_side_validation && deployment_name.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_name' when calling DefaultApi.predictwithpreprocessjson"
      end
      # verify the required parameter 'model_name' is set
      if @api_client.config.client_side_validation && model_name.nil?
        fail ArgumentError, "Missing the required parameter 'model_name' when calling DefaultApi.predictwithpreprocessjson"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling DefaultApi.predictwithpreprocessjson"
      end
      # resource path
      local_var_path = "/endpoints/{deploymentName}/models/{modelName}/{version}/predictwithpreprocessjson".sub('{' + 'deploymentName' + '}', deployment_name.to_s).sub('{' + 'modelName' + '}', model_name.to_s).sub('{' + 'version' + '}', version.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'JsonArrayResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#predictwithpreprocessjson\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Change the state of model to \"start\" or \"stop\"
    # 
    # @param deployment_id ID deployment group
    # @param model_id ID of model
    # @param body the state request
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def update_state(deployment_id, model_id, body, opts = {})
      data, _status_code, _headers = update_state_with_http_info(deployment_id, model_id, body, opts)
      return data
    end

    # Change the state of model to \&quot;start\&quot; or \&quot;stop\&quot;
    # 
    # @param deployment_id ID deployment group
    # @param model_id ID of model
    # @param body the state request
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def update_state_with_http_info(deployment_id, model_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.update_state ..."
      end
      # verify the required parameter 'deployment_id' is set
      if @api_client.config.client_side_validation && deployment_id.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_id' when calling DefaultApi.update_state"
      end
      # verify the required parameter 'model_id' is set
      if @api_client.config.client_side_validation && model_id.nil?
        fail ArgumentError, "Missing the required parameter 'model_id' when calling DefaultApi.update_state"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.update_state"
      end
      # resource path
      local_var_path = "/deployment/{deploymentId}/model/{modelId}/state".sub('{' + 'deploymentId' + '}', deployment_id.to_s).sub('{' + 'modelId' + '}', model_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload a model file to SKIL for import.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [File] :file The file to upload.
    # @return [FileUploadList]
    def upload(opts = {})
      data, _status_code, _headers = upload_with_http_info(opts)
      return data
    end

    # Upload a model file to SKIL for import.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [File] :file The file to upload.
    # @return [Array<(FileUploadList, Fixnum, Hash)>] FileUploadList data, response status code and response headers
    def upload_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DefaultApi.upload ..."
      end
      # resource path
      local_var_path = "/api/upload/model"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params["file"] = opts[:'file'] if !opts[:'file'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FileUploadList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#upload\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
