=begin
#Predict

#Endpoints API for classification and other prediction services in SKIL

OpenAPI spec version: 1.0.3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for SkilCient::DefaultApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'DefaultApi' do
  before do
    # run before each test
    @instance = SkilCient::DefaultApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of DefaultApi' do
    it 'should create an instance of DefaultApi' do
      expect(@instance).to be_instance_of(SkilCient::DefaultApi)
    end
  end

  # unit tests for classify
  # Use the deployed model to classify the input
  # 
  # @param body The input NDArray
  # @param deployment_name Name of the deployment group
  # @param model_name ID or name of the deployed model
  # @param [Hash] opts the optional parameters
  # @return [ClassificationResult]
  describe 'classify test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for classifyarray
  # Same as /classify but returns the output as Base64NDArrayBody
  # 
  # @param body The input NDArray
  # @param deployment_name Name of the deployment group
  # @param model_name ID or name of the deployed model
  # @param [Hash] opts the optional parameters
  # @return [Base64NDArrayBody]
  describe 'classifyarray test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for jsonarray
  # Run inference on the input and returns it as a JsonArrayResponse
  # 
  # @param body The input NDArray
  # @param deployment_name Name of the deployment group
  # @param model_name ID or name of the deployed model
  # @param [Hash] opts the optional parameters
  # @return [JsonArrayResponse]
  describe 'jsonarray test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for logfilepath
  # Get logs file path
  # 
  # @param deployment_name Name of the deployment group
  # @param model_name ID or name of the deployed model
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'logfilepath test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for logs
  # Get logs
  # 
  # @param body the the log request
  # @param deployment_name Name of the deployment group
  # @param model_name ID or name of the deployed model
  # @param [Hash] opts the optional parameters
  # @return [LogBatch]
  describe 'logs test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for modelset
  # Set the model to be served
  # 
  # @param deployment_name Name of the deployment group
  # @param model_name ID or name of the deployed model
  # @param [Hash] opts the optional parameters
  # @option opts [File] :file The model file to upload (.pb file)
  # @return [ModelStatus]
  describe 'modelset test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for modelupdate
  # Update the model to be served
  # 
  # @param deployment_name Name of the deployment group
  # @param model_name ID or name of the deployed model
  # @param [Hash] opts the optional parameters
  # @option opts [File] :file The model file to update with (.pb file)
  # @return [ModelStatus]
  describe 'modelupdate test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for multiclassify
  # Represents all of the labels for a given classification
  # 
  # @param body The input NDArray
  # @param deployment_name Name of the deployment group
  # @param model_name ID or name of the deployed model
  # @param [Hash] opts the optional parameters
  # @return [MultiClassClassificationResult]
  describe 'multiclassify test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for predict
  # Run inference on the input array.
  # 
  # @param body The input NDArray
  # @param deployment_name Name of the deployment group
  # @param model_name ID or name of the deployed model
  # @param [Hash] opts the optional parameters
  # @return [Prediction]
  describe 'predict test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for predictwithpreprocess
  # Preprocesses the input and run inference on it
  # 
  # @param body The input array
  # @param deployment_name Name of the deployment group
  # @param model_name ID or name of the deployed model
  # @param [Hash] opts the optional parameters
  # @return [Prediction]
  describe 'predictwithpreprocess test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for predictwithpreprocessjson
  # Preprocesses the input and run inference on it and returns it as a JsonArrayResponse
  # 
  # @param body The input array
  # @param deployment_name Name of the deployment group
  # @param model_name ID or name of the deployed model
  # @param [Hash] opts the optional parameters
  # @return [JsonArrayResponse]
  describe 'predictwithpreprocessjson test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
