//
// DefaultAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class DefaultAPI: APIBase {
    /**
     Use the deployed model to classify the input
     - parameter body: (body) The input NDArray 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func classify(body: Prediction, deploymentName: String, modelName: String, completion: @escaping ((_ data: ClassificationResult?, _ error: ErrorResponse?) -> Void)) {
        classifyWithRequestBuilder(body: body, deploymentName: deploymentName, modelName: modelName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Use the deployed model to classify the input
     - POST /{deploymentName}/model/{modelName}/default/classify

     - examples: [{contentType=application/json, example={
  "minibatchId" : "minibatchId",
  "results" : [ 0, 0 ],
  "probabilities" : [ 0.452, 0.452 ]
}}]
     - parameter body: (body) The input NDArray 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter modelName: (path) ID or name of the deployed model 
     - returns: RequestBuilder<ClassificationResult> 
     */
    open class func classifyWithRequestBuilder(body: Prediction, deploymentName: String, modelName: String) -> RequestBuilder<ClassificationResult> {
        var path = "/{deploymentName}/model/{modelName}/default/classify"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let modelNamePreEscape = "\(modelName)"
        let modelNamePostEscape = modelNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelName}", with: modelNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = body.encodeToJSON()

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ClassificationResult>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Same as /classify but returns the output as Base64NDArrayBody
     - parameter body: (body) The input NDArray 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func classifyarray(body: Prediction, deploymentName: String, modelName: String, completion: @escaping ((_ data: Base64NDArrayBody?, _ error: ErrorResponse?) -> Void)) {
        classifyarrayWithRequestBuilder(body: body, deploymentName: deploymentName, modelName: modelName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Same as /classify but returns the output as Base64NDArrayBody
     - POST /{deploymentName}/model/{modelName}/default/classifyarray

     - examples: [{contentType=application/json, example={
  "ndarray" : "ndarray"
}}]
     - parameter body: (body) The input NDArray 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter modelName: (path) ID or name of the deployed model 
     - returns: RequestBuilder<Base64NDArrayBody> 
     */
    open class func classifyarrayWithRequestBuilder(body: Prediction, deploymentName: String, modelName: String) -> RequestBuilder<Base64NDArrayBody> {
        var path = "/{deploymentName}/model/{modelName}/default/classifyarray"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let modelNamePreEscape = "\(modelName)"
        let modelNamePostEscape = modelNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelName}", with: modelNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = body.encodeToJSON()

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Base64NDArrayBody>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Run inference on the input and returns it as a JsonArrayResponse
     - parameter body: (body) The input NDArray 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func jsonarray(body: Prediction, deploymentName: String, modelName: String, completion: @escaping ((_ data: JsonArrayResponse?, _ error: ErrorResponse?) -> Void)) {
        jsonarrayWithRequestBuilder(body: body, deploymentName: deploymentName, modelName: modelName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Run inference on the input and returns it as a JsonArrayResponse
     - POST /{deploymentName}/model/{modelName}/default/jsonarray

     - examples: [{contentType=application/json, example={
  "array" : {
    "array" : "array"
  }
}}]
     - parameter body: (body) The input NDArray 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter modelName: (path) ID or name of the deployed model 
     - returns: RequestBuilder<JsonArrayResponse> 
     */
    open class func jsonarrayWithRequestBuilder(body: Prediction, deploymentName: String, modelName: String) -> RequestBuilder<JsonArrayResponse> {
        var path = "/{deploymentName}/model/{modelName}/default/jsonarray"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let modelNamePreEscape = "\(modelName)"
        let modelNamePostEscape = modelNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelName}", with: modelNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = body.encodeToJSON()

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JsonArrayResponse>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get logs file path
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func logfilepath(deploymentName: String, modelName: String, completion: @escaping ((_ data: String?, _ error: ErrorResponse?) -> Void)) {
        logfilepathWithRequestBuilder(deploymentName: deploymentName, modelName: modelName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get logs file path
     - GET /{deploymentName}/model/{modelName}/default/logfilepath

     - examples: [{output=none}]
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter modelName: (path) ID or name of the deployed model 
     - returns: RequestBuilder<String> 
     */
    open class func logfilepathWithRequestBuilder(deploymentName: String, modelName: String) -> RequestBuilder<String> {
        var path = "/{deploymentName}/model/{modelName}/default/logfilepath"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let modelNamePreEscape = "\(modelName)"
        let modelNamePostEscape = modelNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelName}", with: modelNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get logs
     - parameter body: (body) the the log request 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func logs(body: LogRequest, deploymentName: String, modelName: String, completion: @escaping ((_ data: LogBatch?, _ error: ErrorResponse?) -> Void)) {
        logsWithRequestBuilder(body: body, deploymentName: deploymentName, modelName: modelName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get logs
     - POST /{deploymentName}/model/{modelName}/default/logs

     - examples: [{contentType=application/json, example={
  "offset" : 0,
  "rowCount" : 2,
  "logs" : "logs"
}}]
     - parameter body: (body) the the log request 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter modelName: (path) ID or name of the deployed model 
     - returns: RequestBuilder<LogBatch> 
     */
    open class func logsWithRequestBuilder(body: LogRequest, deploymentName: String, modelName: String) -> RequestBuilder<LogBatch> {
        var path = "/{deploymentName}/model/{modelName}/default/logs"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let modelNamePreEscape = "\(modelName)"
        let modelNamePostEscape = modelNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelName}", with: modelNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = body.encodeToJSON()

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<LogBatch>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Set the model to be served
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter file: (form) The model file to upload (.pb file) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func modelset(deploymentName: String, modelName: String, file: URL? = nil, completion: @escaping ((_ data: ModelStatus?, _ error: ErrorResponse?) -> Void)) {
        modelsetWithRequestBuilder(deploymentName: deploymentName, modelName: modelName, file: file).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Set the model to be served
     - POST /{deploymentName}/model/{modelName}/default/modelset

     - examples: [{contentType=application/json, example={
  "status" : 100
}}]
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter file: (form) The model file to upload (.pb file) (optional)
     - returns: RequestBuilder<ModelStatus> 
     */
    open class func modelsetWithRequestBuilder(deploymentName: String, modelName: String, file: URL? = nil) -> RequestBuilder<ModelStatus> {
        var path = "/{deploymentName}/model/{modelName}/default/modelset"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let modelNamePreEscape = "\(modelName)"
        let modelNamePostEscape = modelNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelName}", with: modelNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "file": file
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ModelStatus>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update the model to be served
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter file: (form) The model file to update with (.pb file) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func modelupdate(deploymentName: String, modelName: String, file: URL? = nil, completion: @escaping ((_ data: ModelStatus?, _ error: ErrorResponse?) -> Void)) {
        modelupdateWithRequestBuilder(deploymentName: deploymentName, modelName: modelName, file: file).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update the model to be served
     - POST /{deploymentName}/model/{modelName}/default/modelupdate

     - examples: [{contentType=application/json, example={
  "status" : 100
}}]
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter file: (form) The model file to update with (.pb file) (optional)
     - returns: RequestBuilder<ModelStatus> 
     */
    open class func modelupdateWithRequestBuilder(deploymentName: String, modelName: String, file: URL? = nil) -> RequestBuilder<ModelStatus> {
        var path = "/{deploymentName}/model/{modelName}/default/modelupdate"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let modelNamePreEscape = "\(modelName)"
        let modelNamePostEscape = modelNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelName}", with: modelNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "file": file
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ModelStatus>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Represents all of the labels for a given classification
     - parameter body: (body) The input NDArray 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func multiclassify(body: Prediction, deploymentName: String, modelName: String, completion: @escaping ((_ data: MultiClassClassificationResult?, _ error: ErrorResponse?) -> Void)) {
        multiclassifyWithRequestBuilder(body: body, deploymentName: deploymentName, modelName: modelName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Represents all of the labels for a given classification
     - POST /{deploymentName}/model/{modelName}/default/multiclassify

     - examples: [{contentType=application/json, example={
  "maxOutcomes" : [ "maxOutcomes", "maxOutcomes" ],
  "rankedOutcomes" : [ [ "rankedOutcomes", "rankedOutcomes" ], [ "rankedOutcomes", "rankedOutcomes" ] ],
  "probabilities" : [ [ 0.4, 0.4 ], [ 0.4, 0.4 ] ]
}}]
     - parameter body: (body) The input NDArray 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter modelName: (path) ID or name of the deployed model 
     - returns: RequestBuilder<MultiClassClassificationResult> 
     */
    open class func multiclassifyWithRequestBuilder(body: Prediction, deploymentName: String, modelName: String) -> RequestBuilder<MultiClassClassificationResult> {
        var path = "/{deploymentName}/model/{modelName}/default/multiclassify"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let modelNamePreEscape = "\(modelName)"
        let modelNamePostEscape = modelNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelName}", with: modelNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = body.encodeToJSON()

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<MultiClassClassificationResult>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Run inference on the input array.
     - parameter body: (body) The input NDArray 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func predict(body: Prediction, deploymentName: String, modelName: String, completion: @escaping ((_ data: Prediction?, _ error: ErrorResponse?) -> Void)) {
        predictWithRequestBuilder(body: body, deploymentName: deploymentName, modelName: modelName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Run inference on the input array.
     - POST /{deploymentName}/model/{modelName}/default/predict

     - examples: [{contentType=application/json, example={
  "needsPreProcessing" : true,
  "prediction" : {
    "array" : "array"
  },
  "id" : "id"
}}]
     - parameter body: (body) The input NDArray 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter modelName: (path) ID or name of the deployed model 
     - returns: RequestBuilder<Prediction> 
     */
    open class func predictWithRequestBuilder(body: Prediction, deploymentName: String, modelName: String) -> RequestBuilder<Prediction> {
        var path = "/{deploymentName}/model/{modelName}/default/predict"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let modelNamePreEscape = "\(modelName)"
        let modelNamePostEscape = modelNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelName}", with: modelNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = body.encodeToJSON()

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Prediction>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Preprocesses the input and run inference on it
     - parameter body: (body) The input array 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func predictwithpreprocess(body: [String], deploymentName: String, modelName: String, completion: @escaping ((_ data: Prediction?, _ error: ErrorResponse?) -> Void)) {
        predictwithpreprocessWithRequestBuilder(body: body, deploymentName: deploymentName, modelName: modelName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Preprocesses the input and run inference on it
     - POST /{deploymentName}/model/{modelName}/default/predictwithpreprocess

     - examples: [{contentType=application/json, example={
  "needsPreProcessing" : true,
  "prediction" : {
    "array" : "array"
  },
  "id" : "id"
}}]
     - parameter body: (body) The input array 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter modelName: (path) ID or name of the deployed model 
     - returns: RequestBuilder<Prediction> 
     */
    open class func predictwithpreprocessWithRequestBuilder(body: [String], deploymentName: String, modelName: String) -> RequestBuilder<Prediction> {
        var path = "/{deploymentName}/model/{modelName}/default/predictwithpreprocess"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let modelNamePreEscape = "\(modelName)"
        let modelNamePostEscape = modelNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelName}", with: modelNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = body.encodeToJSON()

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Prediction>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Preprocesses the input and run inference on it and returns it as a JsonArrayResponse
     - parameter body: (body) The input array 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter modelName: (path) ID or name of the deployed model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func predictwithpreprocessjson(body: [String], deploymentName: String, modelName: String, completion: @escaping ((_ data: JsonArrayResponse?, _ error: ErrorResponse?) -> Void)) {
        predictwithpreprocessjsonWithRequestBuilder(body: body, deploymentName: deploymentName, modelName: modelName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Preprocesses the input and run inference on it and returns it as a JsonArrayResponse
     - POST /{deploymentName}/model/{modelName}/default/predictwithpreprocessjson

     - examples: [{contentType=application/json, example={
  "array" : {
    "array" : "array"
  }
}}]
     - parameter body: (body) The input array 
     - parameter deploymentName: (path) Name of the deployment group 
     - parameter modelName: (path) ID or name of the deployed model 
     - returns: RequestBuilder<JsonArrayResponse> 
     */
    open class func predictwithpreprocessjsonWithRequestBuilder(body: [String], deploymentName: String, modelName: String) -> RequestBuilder<JsonArrayResponse> {
        var path = "/{deploymentName}/model/{modelName}/default/predictwithpreprocessjson"
        let deploymentNamePreEscape = "\(deploymentName)"
        let deploymentNamePostEscape = deploymentNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deploymentName}", with: deploymentNamePostEscape, options: .literal, range: nil)
        let modelNamePreEscape = "\(modelName)"
        let modelNamePostEscape = modelNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{modelName}", with: modelNamePostEscape, options: .literal, range: nil)
        let URLString = SkilClientAPI.basePath + path
        let parameters = body.encodeToJSON()

        let url = NSURLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JsonArrayResponse>.Type = SkilClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
